{
  "questions": [
    {
      "id": 1,
      "question": "애플리케이션 빌드 시스템의 주요 목적은 무엇입니까?",
      "choices": [
        "소스코드를 실행 가능한 상태로 변환",
        "애플리케이션 배포 스크립트 작성",
        "소스코드의 품질 측정",
        "테스트 커버리지 확인"
      ],
      "correct_answer": "소스코드를 실행 가능한 상태로 변환",
      "explanation": "빌드 시스템은 소스코드를 컴파일하고 필요한 종속성을 처리하여 실행 가능한 상태로 변환하는 역할을 한다.",
      "wrong_answers": {
        "애플리케이션 배포 스크립트 작성": "배포 스크립트 작성은 배포 과정의 일부이며 빌드 시스템의 주요 목적과는 다르다.",
        "소스코드의 품질 측정": "코드 품질 측정은 정적 분석 도구가 수행하는 작업이며 빌드 시스템의 주요 목적이 아니다.",
        "테스트 커버리지 확인": "테스트 커버리지는 테스트 도구가 담당하는 역할이며, 빌드 시스템의 주된 기능이 아니다."
      }
    },
    {
      "id": 2,
      "question": "컴파일 언어의 빌드 과정에 포함되지 않는 단계는 무엇입니까?",
      "choices": ["전처리기", "파싱", "테스트 실행", "링킹"],
      "correct_answer": "테스트 실행",
      "explanation": "컴파일 언어의 빌드 과정에는 전처리, 파싱, 컴파일, 링킹 등이 포함되지만, 테스트 실행은 별도의 과정으로 수행된다.",
      "wrong_answers": {
        "전처리기": "전처리기는 매크로 처리, 헤더 파일 포함 등의 작업을 수행하는 단계이다.",
        "파싱": "파싱은 소스 코드를 분석하여 문법적 구조를 생성하는 과정이다.",
        "링킹": "링킹은 여러 개의 개별 객체 파일을 결합하여 실행 파일을 생성하는 과정이다."
      }
    },
    {
      "id": 3,
      "question": "Byte Code 언어(Java, C# 등)는 컴파일 결과물을 _________으로 생성합니다.",
      "choices": ["기계어", "class 파일", "실행 파일", "DLL 파일"],
      "correct_answer": "class 파일",
      "explanation": "Java와 C# 같은 Byte Code 언어는 실행 파일이 아닌 중간 코드 형태의 class 파일을 생성하여 가상 머신에서 실행된다.",
      "wrong_answers": {
        "기계어": "Byte Code는 기계어가 아니라 가상 머신에서 실행되는 중간 코드이다.",
        "실행 파일": "실행 파일(EXE, ELF 등)은 네이티브 컴파일된 바이너리이며, Byte Code 언어는 실행 파일을 직접 생성하지 않는다.",
        "DLL 파일": "DLL(Dynamic Link Library)은 동적 라이브러리 파일로, Java의 class 파일과는 다르다."
      }
    },
    {
      "id": 4,
      "question": "빌드 스크립트 작성 시 가장 적합한 도구는 무엇입니까?",
      "choices": ["Maven", "Jenkins", "Ant", "Gradle"],
      "correct_answer": "Maven",
      "explanation": "Maven은 프로젝트 빌드와 종속성 관리를 위한 강력한 도구로, 표준화된 빌드 스크립트를 작성하는 데 적합하다.",
      "wrong_answers": {
        "Jenkins": "Jenkins는 CI/CD 자동화 도구로, 빌드 스크립트 작성보다는 빌드 및 배포를 자동화하는 역할을 한다.",
        "Ant": "Ant는 XML 기반의 빌드 도구로, Maven과 Gradle에 비해 종속성 관리 기능이 부족하다.",
        "Gradle": "Gradle은 유연한 빌드 시스템을 제공하지만, 표준화된 빌드 스크립트 작성에는 Maven이 더 적합하다."
      }
    },

    {
      "id": 5,
      "question": "지속적인 통합(CI) 환경에서 제공되지 않는 기능은 무엇입니까?",
      "choices": [
        "소스코드 품질 측정",
        "자동화된 스케줄 관리",
        "빌드 결과 자동 배포",
        "리소스 자동 복구"
      ],
      "correct_answer": "리소스 자동 복구",
      "explanation": "CI/CD 환경은 코드 품질 측정, 빌드 자동화, 배포 자동화 등의 기능을 제공하지만, 시스템 리소스 자동 복구는 포함되지 않는다.",
      "wrong_answers": {
        "소스코드 품질 측정": "CI 환경에서는 정적 분석 도구와 연계하여 코드 품질을 측정할 수 있다.",
        "자동화된 스케줄 관리": "CI 시스템은 주기적인 빌드 및 테스트 실행을 자동화할 수 있다.",
        "빌드 결과 자동 배포": "CI/CD 환경에서는 빌드가 완료되면 자동으로 배포할 수 있도록 설정할 수 있다."
      }
    },
    {
      "id": 6,
      "question": "빌드 스크립트를 작성할 때 가장 먼저 수행해야 할 작업은?",
      "choices": [
        "빌드 단위 정의",
        "배포 스크립트 작성",
        "빌드 도구 설치",
        "형상관리 서버 설정"
      ],
      "correct_answer": "빌드 단위 정의",
      "explanation": "빌드 스크립트를 작성하기 위해서는 먼저 빌드 단위를 정의하고, 어떤 소스코드와 리소스를 포함할지 결정해야 한다.",
      "wrong_answers": {
        "배포 스크립트 작성": "배포 스크립트는 빌드 이후 애플리케이션을 배포하는 과정에서 필요하며, 빌드 스크립트 작성의 첫 단계가 아니다.",
        "빌드 도구 설치": "빌드 도구를 설치하는 것은 필수적이지만, 먼저 빌드 단위를 정의해야 어떤 도구가 필요한지 결정할 수 있다.",
        "형상관리 서버 설정": "형상관리 서버는 코드 버전 관리를 위한 것이며, 빌드 스크립트 작성과는 별개의 과정이다."
      }
    },
    {
      "id": 7,
      "question": "애플리케이션 배포 시 다수 서버에 동시 배포를 수행하기 위해 필요한 것은?",
      "choices": [
        "동시 배포 작업 정의",
        "배포 스크립트 최적화",
        "서버 확장 구성",
        "배포 로그 분석"
      ],
      "correct_answer": "동시 배포 작업 정의",
      "explanation": "여러 서버에 동시 배포를 수행하려면 배포 작업을 병렬 처리하도록 정의해야 한다.",
      "wrong_answers": {
        "배포 스크립트 최적화": "배포 스크립트 최적화는 중요한 작업이지만, 다수 서버에 배포하기 위한 필수 요소는 아니다.",
        "서버 확장 구성": "서버 확장 구성은 시스템 성능을 향상시키는 과정이며, 다수 서버에 동시 배포하는 것과는 다르다.",
        "배포 로그 분석": "배포 로그 분석은 배포 완료 후 문제를 확인하는 과정으로, 동시 배포의 필수 조건은 아니다."
      }
    },
    {
      "id": 8,
      "question": "빌드 도구와 테스트 도구를 연계할 때 가장 중요한 점은?",
      "choices": [
        "도구의 버전과 연계 호환성 확인",
        "배포 시 사용될 리소스 정의",
        "테스트 시나리오 작성",
        "형상관리 프로세스 점검"
      ],
      "correct_answer": "도구의 버전과 연계 호환성 확인",
      "explanation": "빌드 도구와 테스트 도구가 원활하게 작동하려면 서로 호환되는 버전을 사용하는 것이 중요하다.",
      "wrong_answers": {
        "배포 시 사용될 리소스 정의": "배포 리소스 정의는 배포 단계에서 고려해야 할 사항이며, 빌드 및 테스트 도구 연계와는 직접적인 관련이 없다.",
        "테스트 시나리오 작성": "테스트 시나리오 작성은 테스트 도구의 역할이며, 빌드 도구와의 연계에서 가장 중요한 요소는 아니다.",
        "형상관리 프로세스 점검": "형상관리 프로세스 점검은 코드 변경 관리와 관련된 과정으로, 빌드 및 테스트 도구 연계에서 핵심 요소는 아니다."
      }
    },
    {
      "id": 9,
      "question": "인터프리터 언어의 빌드 과정이 다른 언어에 비해 가지는 장점은?",
      "choices": [
        "높은 보안성",
        "컴파일 속도 향상",
        "실행 파일 생성",
        "복잡한 번역 과정"
      ],
      "correct_answer": "컴파일 속도 향상",
      "explanation": "인터프리터 언어는 소스 코드를 직접 실행하여 컴파일 과정을 거치지 않으므로, 빌드 시간이 필요하지 않다.",
      "wrong_answers": {
        "높은 보안성": "인터프리터 언어는 실행 과정에서 소스코드를 직접 해석하기 때문에 보안성이 높다고 보기는 어렵다.",
        "실행 파일 생성": "인터프리터 언어는 실행 파일을 생성하지 않고, 소스 코드를 직접 해석하여 실행한다.",
        "복잡한 번역 과정": "인터프리터 언어는 번역 과정이 단순하며, 복잡한 번역 과정을 거치지 않는다."
      }
    },
    {
      "id": 10,
      "question": "릴리즈 버전과 개발 버전을 분리하는 주요 이유는?",
      "choices": [
        "소스코드 품질 유지",
        "배포 속도 개선",
        "버전 체계 관리",
        "테스트 시간 단축"
      ],
      "correct_answer": "버전 체계 관리",
      "explanation": "릴리즈 버전과 개발 버전을 분리하는 이유는 소프트웨어의 안정성과 버전 체계를 효과적으로 관리하기 위해서이다.",
      "wrong_answers": {
        "소스코드 품질 유지": "소스코드 품질 유지도 중요하지만, 버전 분리의 주된 목적은 아니다.",
        "배포 속도 개선": "배포 속도는 여러 요인에 의해 영향을 받지만, 릴리즈와 개발 버전 분리의 핵심 목적은 아니다.",
        "테스트 시간 단축": "테스트 시간 단축과 관련이 있을 수 있으나, 릴리즈와 개발 버전의 분리 목적과 직접적으로 연결되지 않는다."
      }
    },
    {
      "id": 11,
      "question": "애플리케이션 빌드에서 사용되는 테스트 커버리지 측정 유형 중 조건 커버리지는 무엇을 확인합니까?",
      "choices": [
        "분기문 내 조건식의 모든 경우",
        "소스 코드의 실행 시간",
        "데이터베이스 연결 상태",
        "배포 도구의 설정 값"
      ],
      "correct_answer": "분기문 내 조건식의 모든 경우",
      "explanation": "조건 커버리지는 프로그램 내 조건문(예: if, switch 등)의 모든 경우를 테스트했는지를 확인하는 커버리지 유형이다.",
      "wrong_answers": {
        "소스 코드의 실행 시간": "테스트 커버리지는 코드 실행 시간과는 무관하며, 실행 시간 분석은 성능 테스트에서 다루어진다.",
        "데이터베이스 연결 상태": "데이터베이스 연결 상태 검사는 커버리지 분석보다는 통합 테스트 또는 연결 테스트에서 수행된다.",
        "배포 도구의 설정 값": "배포 도구의 설정 값은 빌드 프로세스와 관련될 수 있지만, 커버리지 측정의 대상은 아니다."
      }
    },
    {
      "id": 12,
      "question": "테스트 프레임워크는 테스트 코드를 작성하고 ________ 환경을 제공합니다.",
      "choices": ["자동화된", "병렬", "보안된", "수동화된"],
      "correct_answer": "자동화된",
      "explanation": "테스트 프레임워크는 테스트 코드를 실행하여 반복적인 테스트 작업을 자동화할 수 있는 환경을 제공한다.",
      "wrong_answers": {
        "병렬": "테스트 프레임워크는 병렬 실행을 지원할 수 있지만, 기본적으로 자동화된 환경을 제공하는 것이 주요 목적이다.",
        "보안된": "보안 테스트는 별도의 보안 도구에서 수행되며, 테스트 프레임워크의 핵심 목적과는 다르다.",
        "수동화된": "테스트 프레임워크는 수동이 아닌 자동화된 방식으로 테스트를 수행한다."
      }
    },
    {
      "id": 13,
      "question": "빌드 수행 시 소스 코드 품질 측정을 위해 사용되는 도구는 무엇입니까?",
      "choices": ["FindBugs", "Jenkins", "Gradle", "Nexus"],
      "correct_answer": "FindBugs",
      "explanation": "FindBugs는 Java 코드의 정적 분석을 통해 버그와 코드 품질 문제를 발견하는 도구이다.",
      "wrong_answers": {
        "Jenkins": "Jenkins는 CI/CD를 위한 자동화 도구로, 코드 품질 분석보다는 빌드와 배포 자동화에 집중된다.",
        "Gradle": "Gradle은 빌드 자동화 도구이며, 코드 품질 분석을 직접 수행하지 않는다.",
        "Nexus": "Nexus는 아티팩트 리포지토리 관리 도구로, 소스 코드 품질 측정과는 관련이 없다."
      }
    },
    {
      "id": 14,
      "question": "빌드 스케줄 관리 도구는 빌드 결과를 ________로 공유할 수 있습니다.",
      "choices": ["이메일", "실행 파일", "배포 로그", "데이터베이스"],
      "correct_answer": "이메일",
      "explanation": "빌드 스케줄 관리 도구는 빌드가 완료되거나 실패했을 때 이메일을 통해 결과를 공유할 수 있다.",
      "wrong_answers": {
        "실행 파일": "빌드 스케줄 관리 도구는 실행 파일을 생성할 수 있지만, 빌드 결과를 공유하는 방식과는 다르다.",
        "배포 로그": "배포 로그는 배포 과정에서 생성되는 로그 파일이며, 빌드 결과 공유와 직접적인 연관은 없다.",
        "데이터베이스": "빌드 결과를 데이터베이스에 저장할 수 있지만, 일반적으로 이메일을 통해 주요 결과가 공유된다."
      }
    },
    {
      "id": 15,
      "question": "CI/CD 환경에서 빌드 스케줄 도구의 주요 기능 중 하나는?",
      "choices": [
        "작업 주기 설정",
        "네트워크 관리",
        "보안 정책 설정",
        "운영체제 업데이트"
      ],
      "correct_answer": "작업 주기 설정",
      "explanation": "CI/CD 환경에서는 빌드 및 배포 작업을 자동화하기 위해 일정한 주기로 실행되도록 스케줄을 설정할 수 있다.",
      "wrong_answers": {
        "네트워크 관리": "네트워크 관리는 시스템 관리자의 역할이며, 빌드 스케줄 도구의 기능과는 다르다.",
        "보안 정책 설정": "보안 정책 설정은 빌드 자동화 도구가 아닌 보안 도구에서 수행하는 작업이다.",
        "운영체제 업데이트": "운영체제 업데이트는 IT 인프라 관리 도구에서 수행하는 작업이며, CI/CD 환경의 주요 기능이 아니다."
      }
    }
  ]
}
