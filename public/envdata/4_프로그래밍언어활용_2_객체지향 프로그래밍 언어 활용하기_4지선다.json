{
    "questions": [
      {
        "id": 1,
        "question": "객체지향 프로그래밍의 주요 속성에 해당하지 않는 것은?",
        "options": [
          {"a": "캡슐화"},
          {"b": "추상화"},
          {"c": "데이터 흐름"},
          {"d": "다형성"}
        ],
        "answer": "c"
      },
      {
        "id": 2,
        "question": "상속성이란 무엇을 의미하는가?",
        "options": [
          {"a": "하나의 클래스가 다른 클래스의 속성과 기능을 물려받는 것"},
          {"b": "하나의 메소드가 여러 기능을 수행하는 것"},
          {"c": "데이터를 외부에 공개하지 않는 것"},
          {"d": "클래스를 생성하는 것"}
        ],
        "answer": "a"
      },
      {
        "id": 3,
        "question": "객체지향 설계 원칙 중 단일 책임 원칙의 의미는 무엇인가?",
        "options": [
          {"a": "클래스는 한 가지 책임만 가져야 한다"},
          {"b": "클래스는 여러 책임을 분산하여 수행해야 한다"},
          {"c": "클래스는 외부의 데이터를 보호해야 한다"},
          {"d": "클래스는 항상 상속을 사용해야 한다"}
        ],
        "answer": "a"
      },
      {
        "id": 4,
        "question": "객체지향 언어에서 다형성을 구현하는 방법으로 올바른 것은?",
        "options": [
          {"a": "메소드 오버로딩과 오버라이딩"},
          {"b": "데이터 캡슐화와 은닉화"},
          {"c": "추상 클래스와 객체 생성"},
          {"d": "상속과 데이터 보호"}
        ],
        "answer": "a"
      },
      {
        "id": 5,
        "question": "객체지향 프로그래밍에서 클래스와 객체의 관계는 무엇인가?",
        "options": [
          {"a": "클래스는 객체의 복사본이다"},
          {"b": "클래스는 객체의 설계도이다"},
          {"c": "객체는 클래스의 부모이다"},
          {"d": "객체는 데이터만 포함한다"}
        ],
        "answer": "b"
      },
      {
        "id": 6,
        "question": "유스케이스 다이어그램에서 액터는 무엇을 나타내는가?",
        "options": [
          {"a": "시스템 외부와 상호작용하는 요소"},
          {"b": "데이터 흐름의 방향"},
          {"c": "클래스 간의 상호 관계"},
          {"d": "객체의 내부 상태"}
        ],
        "answer": "a"
      },
      {
        "id": 7,
        "question": "객체지향 설계 원칙 중 개방-폐쇄 원칙의 의미는 무엇인가?",
        "options": [
          {"a": "코드는 확장에는 열려 있고 수정에는 닫혀 있어야 한다"},
          {"b": "모든 데이터는 외부에 공개되어야 한다"},
          {"c": "상속을 통해 모든 클래스가 수정 가능해야 한다"},
          {"d": "모든 메소드는 추상화되어야 한다"}
        ],
        "answer": "a"
      },
      {
        "id": 8,
        "question": "다음 중 UML 다이어그램의 종류가 아닌 것은?",
        "options": [
          {"a": "클래스 다이어그램"},
          {"b": "유스케이스 다이어그램"},
          {"c": "상태 전이 다이어그램"},
          {"d": "데이터 흐름 다이어그램"}
        ],
        "answer": "d"
      },
      {
        "id": 9,
        "question": "다형성을 제공하는 객체지향 언어의 주요 특징은?",
        "options": [
          {"a": "하나의 클래스에서 여러 객체를 생성할 수 있음"},
          {"b": "동일한 메소드가 다양한 방식으로 동작할 수 있음"},
          {"c": "모든 데이터가 객체로 표현됨"},
          {"d": "클래스 간의 관계를 은닉함"}
        ],
        "answer": "b"
      },
      {
        "id": 10,
        "question": "인터페이스 분리 원칙의 의미는?",
        "options": [
          {"a": "하나의 인터페이스는 단일 기능만 포함해야 한다"},
          {"b": "여러 인터페이스는 한 클래스에서 사용 가능해야 한다"},
          {"c": "인터페이스는 다른 클래스에서 상속받아야 한다"},
          {"d": "모든 인터페이스는 동일한 기능을 제공해야 한다"}
        ],
        "answer": "a"
      },
      {
        "id": 11,
        "question": "객체지향 언어에서 접근 제어자 중 public의 의미는?",
        "options": [
          {"a": "클래스 외부에서 접근이 가능하다"},
          {"b": "상속받은 클래스만 접근 가능하다"},
          {"c": "동일한 패키지에서만 접근 가능하다"},
          {"d": "클래스 내부에서만 접근 가능하다"}
        ],
        "answer": "a"
      },
      {
        "id": 12,
        "question": "다음 중 상속 관계를 나타내는 UML 다이어그램의 표기법은?",
        "options": [
          {"a": "실선 화살표"},
          {"b": "점선 화살표"},
          {"c": "삼각형 화살표"},
          {"d": "사각형 박스"}
        ],
        "answer": "c"
      },
      {
        "id": 13,
        "question": "시퀀스 다이어그램에서 활성 객체를 나타내는 요소는?",
        "options": [
          {"a": "메시지"},
          {"b": "라이프라인"},
          {"c": "활성 박스"},
          {"d": "클래스"}
        ],
        "answer": "c"
      },
      {
        "id": 14,
        "question": "추상 클래스와 인터페이스의 차이점은?",
        "options": [
          {"a": "추상 클래스는 객체를 생성할 수 있다"},
          {"b": "인터페이스는 다중 상속이 가능하다"},
          {"c": "추상 클래스는 메소드를 가질 수 없다"},
          {"d": "인터페이스는 상속을 지원하지 않는다"}
        ],
        "answer": "b"
      },
      {
        "id": 15,
        "question": "객체지향 언어에서 캡슐화의 주요 목적은?",
        "options": [
          {"a": "객체 간의 데이터 공유"},
          {"b": "데이터를 외부로부터 보호"},
          {"c": "클래스 간의 상속 구현"},
          {"d": "메모리 효율성 증가"}
        ],
        "answer": "b"
      }
    ]
  }
  