{
  "questions": [
    {
      "id": 1,
      "question": "라이브러리는 주로 무엇을 목적으로 만들어진 것인가?",
      "choices": [
        "기술 유출 방지",
        "코드의 재사용 및 부품화",
        "소프트웨어 배포",
        "사용자 인터페이스 개선"
      ],
      "correct_answer": "코드의 재사용 및 부품화",
      "explanation": "라이브러리는 특정 기능을 모듈화하여 코드 재사용성을 높이고 개발 시간을 줄이는 목적을 가진다.",
      "wrong_answers": {
        "기술 유출 방지": "라이브러리는 코드 보호보다는 코드 재사용을 목적으로 한다.",
        "소프트웨어 배포": "배포보다는 개발 효율성을 높이기 위한 기능 제공이 주된 목적이다.",
        "사용자 인터페이스 개선": "UI 개선보다는 기능적 재사용을 목적으로 한다."
      }
    },
    {
      "id": 2,
      "question": "라이브러리의 구성 요소가 아닌 것은?",
      "choices": ["도움말", "설치 파일", "데이터베이스", "예시 코드"],
      "correct_answer": "데이터베이스",
      "explanation": "라이브러리는 코드와 관련된 모듈이나 패키지로 구성되며, 데이터베이스는 라이브러리의 직접적인 구성 요소가 아니다.",
      "wrong_answers": {
        "도움말": "라이브러리는 개발자가 쉽게 사용할 수 있도록 문서를 제공한다.",
        "설치 파일": "라이브러리는 패키지 형태로 제공되며, 이를 설치할 수 있다.",
        "예시 코드": "사용 방법을 이해하기 위해 예제 코드가 함께 제공될 수 있다."
      }
    },
    {
      "id": 3,
      "question": "표준 라이브러리의 장점으로 알맞은 것은?",
      "choices": [
        "별도 설치가 필요 없다.",
        "성능이 뛰어나다.",
        "고급 기술 지원이 포함된다.",
        "오픈소스만 제공된다."
      ],
      "correct_answer": "별도 설치가 필요 없다.",
      "explanation": "표준 라이브러리는 프로그래밍 언어에 기본 포함되어 있어 별도로 설치할 필요가 없다.",
      "wrong_answers": {
        "성능이 뛰어나다.": "표준 라이브러리는 범용적으로 제공되며, 특정 요구사항에 최적화된 경우가 아닐 수 있다.",
        "고급 기술 지원이 포함된다.": "표준 라이브러리는 공식 문서 외의 추가 지원이 포함되지 않는 경우가 많다.",
        "오픈소스만 제공된다.": "표준 라이브러리는 반드시 오픈소스가 아닐 수도 있다."
      }
    },
    {
      "id": 4,
      "question": "외부 라이브러리의 특징은?",
      "choices": [
        "별도 설치가 필요하다.",
        "모든 프로그래밍 언어에 내장되어 있다.",
        "표준 라이브러리보다 기능이 적다.",
        "운영체제에 포함되어 있다."
      ],
      "correct_answer": "별도 설치가 필요하다.",
      "explanation": "외부 라이브러리는 기본 제공되지 않으며, 필요에 따라 별도로 설치하여 사용해야 한다.",
      "wrong_answers": {
        "모든 프로그래밍 언어에 내장되어 있다.": "외부 라이브러리는 특정 언어나 환경에 맞춰 개발된다.",
        "표준 라이브러리보다 기능이 적다.": "외부 라이브러리는 특정 기능에 최적화되어 표준 라이브러리보다 기능이 많을 수 있다.",
        "운영체제에 포함되어 있다.": "운영체제에 포함되지 않고, 필요에 따라 개발자가 추가적으로 설치해야 한다."
      }
    },
    {
      "id": 5,
      "question": "동적 라이브러리의 주요 특징은?",
      "choices": [
        "실행 파일에 포함되지 않는다.",
        "컴파일 시 포함된다.",
        "메모리 사용량이 증가한다.",
        "항상 디스크에 저장된다."
      ],
      "correct_answer": "실행 파일에 포함되지 않는다.",
      "explanation": "동적 라이브러리는 실행 시 로드되므로, 실행 파일에 직접 포함되지 않고 독립적으로 존재한다.",
      "wrong_answers": {
        "컴파일 시 포함된다.": "정적 라이브러리는 컴파일 시 포함되지만, 동적 라이브러리는 실행 시 로드된다.",
        "메모리 사용량이 증가한다.": "동적 라이브러리는 필요한 경우에만 로드되므로 메모리 사용량을 줄일 수 있다.",
        "항상 디스크에 저장된다.": "디스크에 존재하지만 실행 시 메모리에 로드되어 사용된다."
      }
    },
    {
      "id": 6,
      "question": "Python의 대표적인 외부 라이브러리가 아닌 것은?",
      "choices": ["pandas", "numpy", "Spring", "matplotlib"],
      "correct_answer": "Spring",
      "explanation": "Spring은 Java 기반의 프레임워크이며, Python의 외부 라이브러리가 아니다.",
      "wrong_answers": {
        "pandas": "데이터 분석을 위한 Python 라이브러리이다.",
        "numpy": "수학 및 과학 연산을 위한 Python 라이브러리이다.",
        "matplotlib": "데이터 시각화를 위한 Python 라이브러리이다."
      }
    },
    {
      "id": 7,
      "question": "라이브러리 평가 항목 중 성능과 관련된 항목은?",
      "choices": ["문서화", "배포 가능성", "성능 이슈 점검", "코드 재사용"],
      "correct_answer": "성능 이슈 점검",
      "explanation": "라이브러리의 성능을 평가하려면 실행 속도, 메모리 사용량 등의 성능 이슈를 점검해야 한다.",
      "wrong_answers": {
        "문서화": "문서화는 성능보다는 사용 편의성과 관련이 있다.",
        "배포 가능성": "배포 가능성은 라이브러리의 배포 및 유지보수와 관련이 있다.",
        "코드 재사용": "코드 재사용성은 개발 편의성과 관련된 항목이다."
      }
    },
    {
      "id": 8,
      "question": "라이브러리 선택 시 가장 먼저 고려해야 할 사항은?",
      "choices": [
        "사용자의 요구사항",
        "최신 기술 여부",
        "설치 편의성",
        "사용자 인터페이스"
      ],
      "correct_answer": "사용자의 요구사항",
      "explanation": "라이브러리를 선택할 때 가장 중요한 요소는 해당 프로젝트에 적합한 기능을 제공하는지 여부이다.",
      "wrong_answers": {
        "최신 기술 여부": "최신 기술이더라도 프로젝트 요구사항에 맞지 않으면 적절한 선택이 아니다.",
        "설치 편의성": "설치가 쉽더라도 기능이 맞지 않으면 사용할 수 없다.",
        "사용자 인터페이스": "라이브러리는 UI보다는 기능적인 요소가 더 중요한 경우가 많다."
      }
    },
    {
      "id": 9,
      "question": "다음 중 라이브러리의 예시에 해당하지 않는 것은?",
      "choices": ["DLL", "Framework", "Jar", "Class"],
      "correct_answer": "Framework",
      "explanation": "Framework는 라이브러리보다 더 큰 개념으로, 특정 구조와 규칙을 제공하는 개발 도구이다.",
      "wrong_answers": {
        "DLL": "동적 라이브러리 파일의 확장자로 사용된다.",
        "Jar": "Java에서 라이브러리를 패키징하는 파일 형식이다.",
        "Class": "Java의 클래스 파일도 라이브러리의 일부로 사용될 수 있다."
      }
    },
    {
      "id": 10,
      "question": "정적 라이브러리와 동적 라이브러리의 차이점은?",
      "choices": [
        "실행 파일 포함 여부",
        "사용 편의성",
        "지원되는 OS",
        "라이선스 조건"
      ],
      "correct_answer": "실행 파일 포함 여부",
      "explanation": "정적 라이브러리는 실행 파일에 포함되며, 동적 라이브러리는 별도로 로드된다."
    },
    {
      "id": 11,
      "question": "라이브러리를 적용할 때 우선적으로 확인해야 하는 것은?",
      "choices": [
        "최신 릴리즈 여부",
        "지원하는 프로그래밍 언어",
        "인터넷 속도",
        "하드웨어 요구 사항"
      ],
      "correct_answer": "지원하는 프로그래밍 언어",
      "explanation": "라이브러리를 적용할 때 가장 중요한 것은 해당 프로그래밍 언어에서 지원되는지 확인하는 것이다.",
      "wrong_answers": {
        "최신 릴리즈 여부": "최신 버전 여부도 중요하지만, 지원하는 프로그래밍 언어가 맞지 않으면 사용할 수 없다.",
        "인터넷 속도": "라이브러리의 성능과 직접적인 관련은 없으며, 다운로드 속도에만 영향을 줄 뿐이다.",
        "하드웨어 요구 사항": "대부분의 라이브러리는 하드웨어에 크게 영향을 받지 않는다."
      }
    },
    {
      "id": 12,
      "question": "자바의 표준 라이브러리를 사용하는 방법은?",
      "choices": [
        "라이브러리를 다운로드한다.",
        "라이브러리를 수동으로 작성한다.",
        "import 문을 사용한다.",
        "라이브러리를 재컴파일한다."
      ],
      "correct_answer": "import 문을 사용한다.",
      "explanation": "Java의 표준 라이브러리는 기본 제공되며, `import` 문을 사용하여 필요한 클래스를 불러와 사용할 수 있다.",
      "wrong_answers": {
        "라이브러리를 다운로드한다.": "표준 라이브러리는 별도의 다운로드가 필요하지 않다.",
        "라이브러리를 수동으로 작성한다.": "표준 라이브러리는 이미 제공되므로 직접 작성할 필요가 없다.",
        "라이브러리를 재컴파일한다.": "표준 라이브러리는 별도로 컴파일할 필요 없이 바로 사용할 수 있다."
      }
    },
    {
      "id": 13,
      "question": "파이썬의 os 모듈을 불러오는 올바른 방법은?",
      "choices": ["include os", "using os", "import os", "call os"],
      "correct_answer": "import os",
      "explanation": "Python에서는 `import os`를 사용하여 os 모듈을 불러올 수 있다.",
      "wrong_answers": {
        "include os": "`include`는 C 계열 언어에서 사용하는 문법이며, Python에서는 사용되지 않는다.",
        "using os": "`using`은 C# 등에서 네임스페이스를 불러올 때 사용하는 문법이다.",
        "call os": "`call`은 특정 함수를 호출하는 방식이며, 모듈을 불러오는 방법이 아니다."
      }
    },
    {
      "id": 14,
      "question": "표준 라이브러리가 제공하는 일반적인 기능이 아닌 것은?",
      "choices": [
        "날짜 및 시간 처리",
        "멀티미디어 데이터 처리",
        "운영체제 인터페이스",
        "데이터베이스 설계"
      ],
      "correct_answer": "데이터베이스 설계",
      "explanation": "표준 라이브러리는 데이터베이스와의 인터페이스를 제공할 수 있지만, 직접적인 데이터베이스 설계 기능은 포함되지 않는다.",
      "wrong_answers": {
        "날짜 및 시간 처리": "표준 라이브러리는 날짜 및 시간과 관련된 모듈을 제공한다.",
        "멀티미디어 데이터 처리": "표준 라이브러리는 일부 기본적인 멀티미디어 기능을 제공할 수 있다.",
        "운영체제 인터페이스": "운영체제와 상호작용할 수 있는 기능이 표준 라이브러리에서 제공된다."
      }
    },
    {
      "id": 15,
      "question": "다음 중 라이브러리 평가 항목에 해당하는 것은?",
      "choices": [
        "인터페이스 디자인",
        "코드 스타일",
        "보안 취약점",
        "API 문서화"
      ],
      "correct_answer": "API 문서화",
      "explanation": "API 문서화는 라이브러리 사용의 편의성을 평가하는 중요한 항목이다.",
      "wrong_answers": {
        "인터페이스 디자인": "인터페이스 디자인은 라이브러리보다는 애플리케이션 UI와 관련이 있다.",
        "코드 스타일": "코드 스타일은 라이브러리의 기능보다는 개발자의 스타일과 관련이 있다.",
        "보안 취약점": "보안 취약점 점검은 중요하지만, 라이브러리의 평가 항목 중 주요 요소는 아니다."
      }
    }
  ]
}
