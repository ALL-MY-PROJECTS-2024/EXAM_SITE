{
  "questions": [
    {
      "id": 61,
      "question": "데이터베이스의 기본 특징으로 올바르지 않은 것은?",
      "choices": [
        "실시간 접근성",
        "동시 공용",
        "데이터의 변경 불가능성",
        "계속적 변화"
      ],
      "correct_answer": "데이터의 변경 불가능성",
      "explanation": "데이터베이스는 데이터를 저장하고 필요에 따라 수정 및 삭제할 수 있는 구조이므로 변경이 가능하다.",
      "wrong_answers": {
        "실시간 접근성": "데이터베이스는 빠른 데이터 검색과 접근을 지원한다.",
        "동시 공용": "데이터베이스는 여러 사용자가 동시에 데이터를 공유하고 사용할 수 있도록 지원한다.",
        "계속적 변화": "데이터는 지속적으로 수정, 삭제, 추가될 수 있다."
      }
    },
    {
      "id": 62,
      "question": "관계형 데이터베이스의 주요 구성 요소는?",
      "choices": ["노드", "테이블", "객체", "파일"],
      "correct_answer": "테이블",
      "explanation": "관계형 데이터베이스(RDBMS)는 테이블(Table) 구조를 기반으로 데이터를 저장하고 관리한다.",
      "wrong_answers": {
        "노드": "노드는 그래프 데이터베이스에서 사용되는 개념이다.",
        "객체": "객체는 객체지향형 데이터베이스에서 사용된다.",
        "파일": "파일 시스템의 개념으로, RDBMS에서는 데이터를 테이블에 저장한다."
      }
    },
    {
      "id": 63,
      "question": "트랜잭션의 ACID 속성 중 데이터 일관성을 보장하는 것은?",
      "choices": [
        "Atomicity (원자성)",
        "Consistency (일관성)",
        "Isolation (고립성)",
        "Durability (지속성)"
      ],
      "correct_answer": "Consistency (일관성)",
      "explanation": "일관성(Consistency)은 데이터가 트랜잭션 전후에도 일관된 상태를 유지하도록 보장하는 속성이다.",
      "wrong_answers": {
        "Atomicity (원자성)": "트랜잭션이 모두 수행되거나 전혀 수행되지 않는 것을 보장한다.",
        "Isolation (고립성)": "트랜잭션이 독립적으로 실행되도록 보장한다.",
        "Durability (지속성)": "트랜잭션이 완료된 후에도 데이터가 영구적으로 저장됨을 의미한다."
      }
    },
    {
      "id": 64,
      "question": "DDL 명령어에 해당하지 않는 것은?",
      "choices": ["CREATE", "DROP", "SELECT", "ALTER"],
      "correct_answer": "SELECT",
      "explanation": "SELECT는 데이터를 조회하는 명령어로, DML (Data Manipulation Language)에 해당한다.",
      "wrong_answers": {
        "CREATE": "데이터베이스 객체(테이블, 뷰, 인덱스 등)를 생성하는 DDL 명령어이다.",
        "DROP": "데이터베이스 객체를 삭제하는 DDL 명령어이다.",
        "ALTER": "기존 테이블의 구조를 변경하는 DDL 명령어이다."
      }
    },
    {
      "id": 65,
      "question": "관계형 데이터베이스의 데이터 간 관계는 주로 무엇으로 표현되는가?",
      "choices": ["노드", "키와 값", "기본키와 외래키", "데이터 그래프"],
      "correct_answer": "기본키와 외래키",
      "explanation": "관계형 데이터베이스에서는 기본키(Primary Key)와 외래키(Foreign Key)를 사용하여 테이블 간 관계를 설정한다.",
      "wrong_answers": {
        "노드": "그래프 데이터베이스에서 사용되는 개념이다.",
        "키와 값": "NoSQL(Key-Value Store) 데이터베이스에서 사용된다.",
        "데이터 그래프": "그래프 데이터베이스에서 관계를 표현하는 방식이다."
      }
    },
    {
      "id": 66,
      "question": "데이터베이스 관리시스템(DBMS)의 주요 기능이 아닌 것은?",
      "choices": ["동시성 제어", "회복 관리", "데이터 시각화", "보안 관리"],
      "correct_answer": "데이터 시각화",
      "explanation": "DBMS는 데이터를 저장, 수정, 검색, 보안 관리 등을 수행하지만, 데이터를 시각적으로 표현하는 기능은 제공하지 않는다.",
      "wrong_answers": {
        "동시성 제어": "여러 사용자가 동시에 접근할 때 데이터 충돌을 방지하는 기능이다.",
        "회복 관리": "시스템 장애 발생 시 데이터를 복구하는 기능이다.",
        "보안 관리": "사용자 인증 및 접근 권한을 설정하는 기능이다."
      }
    },
    {
      "id": 67,
      "question": "정규화의 주요 목적은?",
      "choices": [
        "데이터 중복 제거",
        "데이터 조회 속도 증가",
        "데이터 압축",
        "데이터 암호화"
      ],
      "correct_answer": "데이터 중복 제거",
      "explanation": "정규화(Normalization)는 데이터 중복을 최소화하고 데이터 일관성을 유지하기 위한 데이터베이스 설계 기법이다.",
      "wrong_answers": {
        "데이터 조회 속도 증가": "정규화가 지나치면 조회 속도가 저하될 수 있다.",
        "데이터 압축": "정규화는 압축이 아니라 테이블 구조를 최적화하는 과정이다.",
        "데이터 암호화": "보안 기술이며 정규화와 관련이 없다."
      }
    },
    {
      "id": 68,
      "question": "DML(Data Manipulation Language)의 주요 명령어가 아닌 것은?",
      "choices": ["INSERT", "SELECT", "UPDATE", "GRANT"],
      "correct_answer": "GRANT",
      "explanation": "GRANT는 권한을 부여하는 명령어로, DCL (Data Control Language, 데이터 제어 언어)에 해당한다.",
      "wrong_answers": {
        "INSERT": "새로운 데이터를 추가하는 DML 명령어이다.",
        "SELECT": "데이터를 조회하는 DML 명령어이다.",
        "UPDATE": "기존 데이터를 수정하는 DML 명령어이다."
      }
    },
    {
      "id": 69,
      "question": "객체지향형 데이터베이스의 특징으로 적합한 것은?",
      "choices": [
        "계층 구조",
        "객체 재사용",
        "데이터 간의 고정 관계",
        "레코드 기반 접근"
      ],
      "correct_answer": "객체 재사용",
      "explanation": "객체지향 데이터베이스(OODBMS)는 객체지향 개념을 적용하여 객체 재사용, 캡슐화, 상속 등을 지원한다.",
      "wrong_answers": {
        "계층 구조": "트리 구조를 가진 계층형 데이터베이스의 특징이다.",
        "데이터 간의 고정 관계": "관계형 데이터베이스(RDBMS)의 특징이다.",
        "레코드 기반 접근": "RDBMS에서 레코드 단위로 데이터를 처리하는 방식이다."
      }
    },
    {
      "id": 70,
      "question": "트랜잭션의 원자성(Atomicity)은 무엇을 의미하는가?",
      "choices": [
        "데이터의 무결성을 보장",
        "모든 작업이 완료되거나 모두 실패하는 것",
        "데이터의 동시 접근 가능",
        "장애 발생 시 자동 복구"
      ],
      "correct_answer": "모든 작업이 완료되거나 모두 실패하는 것",
      "explanation": "원자성(Atomicity)은 트랜잭션 내 모든 연산이 완전히 수행되거나 전혀 수행되지 않는 것을 보장하는 성질이다.",
      "wrong_answers": {
        "데이터의 무결성을 보장": "일관성(Consistency)의 역할이며, 원자성과는 다르다.",
        "데이터의 동시 접근 가능": "고립성(Isolation)과 관련되며, 트랜잭션의 독립적 실행을 보장하는 개념이다.",
        "장애 발생 시 자동 복구": "지속성(Durability)의 역할로, 트랜잭션이 성공적으로 완료된 후에도 데이터가 유지되도록 한다."
      }
    },
    {
      "id": 71,
      "question": "SQL의 표준에서 JOIN 연산자가 처음 추가된 버전은?",
      "choices": ["SQL-86", "SQL-89", "SQL-92", "SQL:1999"],
      "correct_answer": "SQL-92",
      "explanation": "SQL-92 표준에서 JOIN 연산자(예: INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN)가 공식적으로 추가되었다.",
      "wrong_answers": {
        "SQL-86": "SQL-86은 최초의 SQL 표준이지만, 명시적인 JOIN 문법이 포함되지 않았다.",
        "SQL-89": "SQL-89에서는 WHERE 절을 사용한 암시적 조인만 가능했으며, JOIN 키워드는 없었다.",
        "SQL:1999": "SQL:1999에서는 WITH 절(공통 테이블 표현, CTE) 및 윈도우 함수(Window Functions)가 추가되었다."
      }
    },
    {
      "id": 72,
      "question": "다음 중 관계형 데이터베이스의 장점은?",
      "choices": [
        "데이터 저장 용량 증가",
        "복잡한 구조 관리 용이",
        "데이터 무결성 유지",
        "실시간 분석"
      ],
      "correct_answer": "데이터 무결성 유지",
      "explanation": "관계형 데이터베이스는 기본키(Primary Key), 외래키(Foreign Key), 제약 조건(Constraints) 등을 활용하여 데이터 무결성을 유지한다.",
      "wrong_answers": {
        "데이터 저장 용량 증가": "데이터 저장 용량은 관계형 데이터베이스의 장점이 아니라 데이터베이스 아키텍처에 따라 다르다.",
        "복잡한 구조 관리 용이": "관계형 데이터베이스는 정규화 과정과 스키마 설계가 필요하여 구조 관리가 복잡할 수 있다.",
        "실시간 분석": "관계형 데이터베이스는 실시간 분석보다는 OLTP(온라인 트랜잭션 처리)에 최적화되어 있다."
      }
    },
    {
      "id": 73,
      "question": "데이터베이스 종류 중 데이터를 계층적으로 저장하는 방식은?",
      "choices": [
        "관계형 데이터베이스",
        "객체지향형 데이터베이스",
        "계층형 데이터베이스",
        "망형 데이터베이스"
      ],
      "correct_answer": "계층형 데이터베이스",
      "explanation": "계층형 데이터베이스는 트리(Tree) 구조를 기반으로 상위 노드와 하위 노드 간 계층 관계를 유지한다.",
      "wrong_answers": {
        "관계형 데이터베이스": "관계형 데이터베이스는 테이블 기반의 데이터 모델을 사용하며, 계층 구조를 직접 지원하지 않는다.",
        "객체지향형 데이터베이스": "객체지향형 데이터베이스는 객체 간의 관계를 유지하며, 계층적 관계보다는 객체 관계 모델을 따른다.",
        "망형 데이터베이스": "망형 데이터베이스는 복잡한 네트워크 구조를 가질 수 있으며, 계층적 관계가 아닌 다대다 관계를 표현한다."
      }
    },
    {
      "id": 74,
      "question": "트랜잭션 고립화 수준 중 가장 낮은 수준은?",
      "choices": [
        "Read Committed",
        "Read Uncommitted",
        "Repeatable Read",
        "Serializable"
      ],
      "correct_answer": "Read Uncommitted",
      "explanation": "Read Uncommitted는 커밋되지 않은 데이터를 읽을 수 있는 가장 낮은 수준의 고립화(Isolation) 수준으로, Dirty Read(더티 리드) 현상이 발생할 수 있다.",
      "wrong_answers": {
        "Read Committed": "Read Committed는 트랜잭션이 커밋된 데이터만 읽을 수 있도록 제한한다.",
        "Repeatable Read": "Repeatable Read는 동일한 트랜잭션 내에서 동일한 데이터를 반복 조회해도 값이 변하지 않도록 보장한다.",
        "Serializable": "Serializable은 가장 강력한 고립화 수준으로, 트랜잭션 간 완벽한 격리를 보장한다."
      }
    },
    {
      "id": 75,
      "question": "PostgreSQL에서 다중 테이블을 상속받아 생성할 수 있는 기능은?",
      "choices": ["ACID 지원", "테이블 상속", "트랜잭션 처리", "데이터 암호화"],
      "correct_answer": "테이블 상속",
      "explanation": "PostgreSQL은 테이블 상속(Table Inheritance)을 지원하여 하나의 테이블이 여러 테이블을 상속받아 사용할 수 있다.",
      "wrong_answers": {
        "ACID 지원": "PostgreSQL은 기본적으로 ACID(원자성, 일관성, 고립성, 지속성)를 지원하지만, 테이블 상속과는 관련이 없다.",
        "트랜잭션 처리": "트랜잭션은 데이터베이스 내에서 일관성을 유지하는 기능으로, 테이블 상속과는 무관하다.",
        "데이터 암호화": "데이터 암호화는 보안 기능이며, 테이블 상속과 직접적인 연관이 없다."
      }
    }
  ]
}
