{
  "questions": [
    {
      "id": 1,
      "question": "UI 설계 확인의 주요 목적이 아닌 것은?",
      "choices": [
        "설계된 화면과 폼의 흐름 확인",
        "제약사항 반영",
        "사용자 테스트 수행",
        "UI 설계 문서 수정"
      ],
      "correct_answer": "사용자 테스트 수행",
      "explanation": "UI 설계 확인 단계는 주로 화면 흐름, 구성 요소, 제약사항 반영 여부 등을 검토하는 단계로, ‘사용자 테스트 수행’은 별도의 사용자 검증 단계나 프로토타입 평가 단계에서 이루어집니다.",
      "wrong_answers": {
        "설계된 화면과 폼의 흐름 확인": "설계가 요구사항에 맞게 이루어졌는지, 화면 간 연결(Flow)이 원활한지 확인하는 것은 핵심적인 검토 내용입니다.",
        "제약사항 반영": "기술적·업무적·법적 제약 등이 정확히 반영되었는지 확인하는 것도 UI 설계 확인 단계에서 중요하게 다뤄집니다.",
        "UI 설계 문서 수정": "설계 확인 과정에서 문제가 발견되면 설계 문서를 수정·보완하는 것이 필연적인 과정입니다."
      }
    },
    {
      "id": 2,
      "question": "UI 설계 도구의 하나인 와이어프레임의 주요 역할은?",
      "choices": [
        "데이터베이스 설계",
        "페이지 레이아웃 및 화면 이동 기술",
        "코딩 단계에서 사용",
        "사용성 테스트 수행"
      ],
      "correct_answer": "페이지 레이아웃 및 화면 이동 기술",
      "explanation": "와이어프레임(Wireframe)은 각 화면의 레이아웃, 주요 구성 요소의 배치 및 간단한 화면 이동 흐름을 시각적으로 설계하는 데 사용됩니다.",
      "wrong_answers": {
        "데이터베이스 설계": "데이터베이스 설계는 ERD(Entity Relationship Diagram)와 같은 도구를 사용하며, UI 설계 도구인 와이어프레임과 직접적인 관련이 없습니다.",
        "코딩 단계에서 사용": "와이어프레임은 코딩 이전 단계에서 화면 구성을 설계하는 역할을 하므로 코딩 단계에서 직접 사용되는 것은 아닙니다.",
        "사용성 테스트 수행": "와이어프레임은 사용성 테스트보다 초기 설계 목적으로 사용됩니다. 본격적인 사용성 테스트는 프로토타입이나 실제 구현된 화면에서 이루어지는 경우가 많습니다."
      }
    },
    {
      "id": 3,
      "question": "UI 요구사항에 포함되지 않는 것은?",
      "choices": [
        "간편한 인터페이스 구성",
        "검색 기능 제공",
        "사용자의 요구를 반영한 출력",
        "하드웨어 제약 확인"
      ],
      "correct_answer": "하드웨어 제약 확인",
      "explanation": "UI 요구사항은 사용자 경험을 중심으로 한 기능적인 요구사항을 포함하며, '하드웨어 제약'은 시스템의 운영 환경과 관련된 별도의 고려사항입니다.",
      "wrong_answers": {
        "간편한 인터페이스 구성": "사용성이 높은 UI/UX를 구성하는 것은 UI 요구사항에서 핵심적으로 다루는 요소입니다.",
        "검색 기능 제공": "검색 기능은 사용자의 요구를 반영한 UI 기능 중 하나로 포함될 수 있습니다.",
        "사용자의 요구를 반영한 출력": "UI는 사용자가 원하는 형태의 데이터를 출력해야 하므로, 이는 UI 요구사항의 중요한 부분입니다."
      }
    },
    {
      "id": 4,
      "question": "자연어 사용자 인터페이스(NUI)의 특징으로 올바른 것은?",
      "choices": [
        "텍스트 명령 기반 인터페이스",
        "그래픽 기반의 인터페이스",
        "몸짓과 말소리로 IT 기기 사용",
        "하드웨어 연결을 위한 도구"
      ],
      "correct_answer": "몸짓과 말소리로 IT 기기 사용",
      "explanation": "NUI(Natural User Interface)는 자연어, 제스처, 음성 등의 자연스러운 입력 방식을 통해 IT 기기를 제어하는 사용자 인터페이스입니다.",
      "wrong_answers": {
        "텍스트 명령 기반 인터페이스": "CLI(Command Line Interface) 방식으로, 명령어를 입력하는 텍스트 기반의 인터페이스로 NUI와는 다릅니다.",
        "그래픽 기반의 인터페이스": "GUI(Graphic User Interface)는 아이콘과 그래픽 요소를 활용한 인터페이스이며, 자연어 인터페이스(NUI)와 구분됩니다.",
        "하드웨어 연결을 위한 도구": "NUI는 하드웨어 자체보다 사용자와 기기의 상호작용 방식을 중심으로 하는 개념입니다."
      }
    },
    {
      "id": 5,
      "question": "UI 설계서의 주요 항목에 해당하지 않는 것은?",
      "choices": [
        "화면 구성 요소",
        "구현 시나리오",
        "화면 이동 흐름",
        "UI 개발 도구 설명"
      ],
      "correct_answer": "UI 개발 도구 설명",
      "explanation": "UI 설계서는 화면 설계와 사용성 관련 내용을 포함하며, 'UI 개발 도구'에 대한 설명은 보통 별도의 기술 문서에서 다룹니다.",
      "wrong_answers": {
        "화면 구성 요소": "UI 설계서의 핵심 항목으로, 화면에 포함될 UI 요소(버튼, 입력 창 등)를 정의합니다.",
        "구현 시나리오": "UI가 어떻게 동작하는지를 정의하는 중요한 요소로, 사용자와의 상호작용을 설명합니다.",
        "화면 이동 흐름": "각 화면 간 이동 방식과 흐름을 정의하는 것이 UI 설계서의 주요 항목 중 하나입니다."
      }
    },
    {
      "id": 6,
      "question": "UI 설계 도구 중 스토리보드는 어떤 역할을 하는가?",
      "choices": [
        "디버깅 지원",
        "설계 문서에 디스크립션 포함",
        "실제 화면 구현",
        "사용성 평가"
      ],
      "correct_answer": "설계 문서에 디스크립션 포함",
      "explanation": "스토리보드는 UI 화면을 순서대로 나열하고, 각 화면에서의 동작과 설명(디스크립션)을 정리해놓은 문서로, 설계 단계를 좀 더 구체화하는 역할을 합니다.",
      "wrong_answers": {
        "디버깅 지원": "스토리보드는 UI 설계 문서로서, 개발 단계에서 발생하는 오류를 디버깅하는 기능은 없습니다.",
        "실제 화면 구현": "스토리보드는 실제 화면 구현을 위한 설계 문서일 뿐, 직접적인 구현 도구는 아닙니다.",
        "사용성 평가": "스토리보드를 기초로 피드백을 받을 수는 있지만, 본격적인 사용성 평가(Usability Test)는 프로토타입 이상에서 진행됩니다."
      }
    },
    {
      "id": 7,
      "question": "UI 표준 및 지침에서 다루지 않는 내용은?",
      "choices": ["화면 구성", "화면 이동", "개발 일정", "공통 조건"],
      "correct_answer": "개발 일정",
      "explanation": "UI 표준 및 지침은 화면 구성 요소, 이동 흐름, 공통적인 사용 규칙 등을 정의하며, '개발 일정'은 UI 설계의 범주에 포함되지 않고 프로젝트 관리의 영역에 속합니다.",
      "wrong_answers": {
        "화면 구성": "UI 표준에서는 화면 배치 및 요소 배치를 정의하는 규칙을 제공합니다.",
        "화면 이동": "UI에서 페이지 간 이동 방식 및 흐름을 관리하는 것도 UI 지침에 포함됩니다.",
        "공통 조건": "UI에서 일관성을 유지하기 위한 공통적인 디자인 요소나 동작 규칙이 포함됩니다."
      }
    },
    {
      "id": 8,
      "question": "소프트웨어 아키텍처의 정의는?",
      "choices": [
        "데이터베이스 설계의 한 부분",
        "UI 설계의 구성 요소",
        "소프트웨어 요소 간의 관계 표현",
        "네트워크 설계 구조"
      ],
      "correct_answer": "소프트웨어 요소 간의 관계 표현",
      "explanation": "소프트웨어 아키텍처는 시스템을 구성하는 요소(컴포넌트, 모듈) 및 이들 간의 상호작용 관계를 정의하는 개념입니다.",
      "wrong_answers": {
        "데이터베이스 설계의 한 부분": "데이터베이스 설계는 소프트웨어 아키텍처의 일부가 될 수 있지만, 전체적인 개념을 포괄하지는 않습니다.",
        "UI 설계의 구성 요소": "UI 설계는 소프트웨어 아키텍처의 일부 요소일 뿐, 아키텍처 전체를 의미하는 것은 아닙니다.",
        "네트워크 설계 구조": "네트워크 설계는 시스템의 연결 구조를 다루지만, 소프트웨어 아키텍처는 더 넓은 개념을 포함합니다."
      }
    },
    {
      "id": 9,
      "question": "제약사항의 종류가 아닌 것은?",
      "choices": ["기술적 제약", "법규 적합 제약", "정책 제약", "사용자 제약"],
      "correct_answer": "사용자 제약",
      "explanation": "제약사항은 보통 기술적, 법규 적합, 정책적인 측면에서 나누어지며, '사용자 제약'은 공식적인 분류에 포함되지 않습니다.",
      "wrong_answers": {
        "기술적 제약": "사용 가능한 기술 스택, 성능 요구사항 등의 제한 사항을 의미합니다.",
        "법규 적합 제약": "개인정보 보호법, 전자정부법 등의 법률을 준수해야 하는 제약이 포함됩니다.",
        "정책 제약": "조직 내부의 운영 정책이나 보안 정책 등의 제약 사항을 의미합니다."
      }
    },
    {
      "id": 10,
      "question": "와이어프레임과 스토리보드의 차이점은?",
      "choices": [
        "와이어프레임은 테스트를 포함한다.",
        "스토리보드는 디스크립션을 포함한다.",
        "와이어프레임은 목업보다 상세하다.",
        "스토리보드는 코딩에 사용된다."
      ],
      "correct_answer": "스토리보드는 디스크립션을 포함한다.",
      "explanation": "스토리보드는 화면의 흐름과 구성 요소를 설명하는 설계 문서로, 각 화면의 디스크립션(설명)이 포함됩니다.",
      "wrong_answers": {
        "와이어프레임은 테스트를 포함한다.": "와이어프레임은 UI의 기초적인 설계를 의미하며, 직접적인 테스트 기능은 포함되지 않습니다.",
        "와이어프레임은 목업보다 상세하다.": "일반적으로 목업(Mockup)이 와이어프레임보다 상세한 설계를 포함하고 있습니다.",
        "스토리보드는 코딩에 사용된다.": "스토리보드는 UI 설계를 설명하는 문서이며, 실제 코드 작성에 직접적으로 사용되지는 않습니다."
      }
    },
    {
      "id": 11,
      "question": "UI 설계 확인 시 확인해야 할 것이 아닌 것은?",
      "choices": [
        "UI가 사용자 편리성을 반영했는가",
        "메뉴 구조가 논리적인가",
        "서버 속도가 빠른가",
        "화면 이동이 직관적인가"
      ],
      "correct_answer": "서버 속도가 빠른가",
      "explanation": "UI 설계 확인 단계에서는 화면의 사용성, 논리적 구조, 화면 이동이 직관적인지 등을 중점적으로 확인하며, '서버 속도'는 성능 또는 인프라 관련 항목이므로 UI 설계 확인 대상이 아닙니다.",
      "wrong_answers": {
        "UI가 사용자 편리성을 반영했는가": "사용자가 쉽게 사용할 수 있도록 UI가 설계되었는지 검토하는 것은 필수 사항입니다.",
        "메뉴 구조가 논리적인가": "사용자가 메뉴를 쉽게 이해하고 접근할 수 있도록 논리적인 구조가 되어 있는지 확인해야 합니다.",
        "화면 이동이 직관적인가": "화면 간의 이동이 자연스럽고 일관성이 있는지 검토하는 것은 중요한 확인 요소입니다."
      }
    },
    {
      "id": 12,
      "question": "UI 설계 도구 중 프로토타입의 특징은?",
      "choices": [
        "정적인 형태의 화면 모형",
        "실제 테스트 가능한 형태",
        "와이어프레임보다 간단한 모형",
        "사용성 테스트 문서"
      ],
      "correct_answer": "실제 테스트 가능한 형태",
      "explanation": "프로토타입(Prototype)은 사용자가 상호작용을 경험할 수 있도록 설계된 모델로, 이를 통해 실제 사용성 테스트와 피드백 수렴이 가능합니다.",
      "wrong_answers": {
        "정적인 형태의 화면 모형": "정적인 모형은 와이어프레임이나 목업(Mockup)에 가깝고, 프로토타입은 동적인 요소를 포함합니다.",
        "와이어프레임보다 간단한 모형": "프로토타입은 보통 와이어프레임보다 더 정교하며, 실제 동작 흐름을 일부 구현할 수 있습니다.",
        "사용성 테스트 문서": "프로토타입은 문서가 아니라, 실제 인터랙션을 체험할 수 있는 모델입니다."
      }
    },
    {
      "id": 13,
      "question": "화면 설계의 제약사항 확인 중 기술적 제약사항에 포함되는 것은?",
      "choices": ["색상 조화", "법규 적합성", "데이터 사용 정책", "사용성"],
      "correct_answer": "데이터 사용 정책",
      "explanation": "데이터 사용 정책은 시스템에서 데이터를 저장, 교환, 처리하는 방식과 관련된 기술적 제약 사항입니다.",
      "wrong_answers": {
        "색상 조화": "색상 조화는 UI/UX 디자인 원칙에 포함되며, 기술적 제약보다는 시각적 요소에 해당합니다.",
        "법규 적합성": "개인정보 보호법 등은 법적 규제에 해당하며, 기술적 제약과는 구분됩니다.",
        "사용성": "사용성은 UI/UX의 평가 기준이며, 기술적 제약과는 관련이 없습니다."
      }
    },
    {
      "id": 14,
      "question": "UI 설계서 작성 시 요구사항 명세서의 구성 요소는?",
      "choices": [
        "인터페이스, 검색 기능, 출력",
        "기술적 제약, 하드웨어 제약, 정책",
        "HTML, CSS, JavaScript",
        "클라이언트, 서버, 네트워크"
      ],
      "correct_answer": "기술적 제약, 하드웨어 제약, 정책",
      "explanation": "요구사항 명세서에는 기능적 요구사항과 비기능적 요구사항이 포함되며, 비기능적 요구사항에는 기술적 제약, 하드웨어 제약, 정책이 포함됩니다.",
      "wrong_answers": {
        "인터페이스, 검색 기능, 출력": "이들은 기능 요구사항의 일부지만, 요구사항 명세서의 전반적인 구성 요소를 대표하지 않습니다.",
        "HTML, CSS, JavaScript": "이들은 구현 기술에 해당하며, 요구사항 명세서의 주요 구성 요소는 아닙니다.",
        "클라이언트, 서버, 네트워크": "시스템 아키텍처의 일부이며, UI 설계 요구사항과 직접적인 연관은 없습니다."
      }
    },
    {
      "id": 15,
      "question": "화면 구성 요소 확인 시 확인해야 할 것이 아닌 것은?",
      "choices": [
        "화면 이동 흐름",
        "화면 간 조화",
        "하드웨어 동작",
        "문자열 적합성"
      ],
      "correct_answer": "하드웨어 동작",
      "explanation": "화면 구성 요소 확인은 UI 요소(버튼, 메뉴, 텍스트 필드 등)의 배치와 흐름을 점검하는 과정이며, '하드웨어 동작'은 UI 설계보다는 시스템 인프라의 범주에 속합니다.",
      "wrong_answers": {
        "화면 이동 흐름": "사용자가 혼란 없이 화면을 이동할 수 있도록 흐름을 확인하는 것은 중요한 요소입니다.",
        "화면 간 조화": "디자인 요소들이 조화롭게 배치되어 일관성을 유지하는지 확인해야 합니다.",
        "문자열 적합성": "UI에 표시되는 텍스트가 적절한지, 오탈자가 없는지 검토하는 것은 필수적인 확인 사항입니다."
      }
    },
    {
      "id": 16,
      "question": "UI 설계 확인의 단계에서 화면 구성의 조화를 확인하는 방법은?",
      "choices": [
        "화면 이동 흐름 확인",
        "문자열 적합성 확인",
        "색상과 균형감 확인",
        "데이터 연결 테스트"
      ],
      "correct_answer": "색상과 균형감 확인",
      "explanation": "화면 구성의 조화는 색상 팔레트의 통일성, 시각적 균형, 디자인 일관성 등을 확인하여 판단할 수 있습니다.",
      "wrong_answers": {
        "화면 이동 흐름 확인": "화면 간의 이동이 자연스러운지를 확인하는 것이며, 디자인적 조화보다는 기능적인 흐름을 평가하는 과정입니다.",
        "문자열 적합성 확인": "사용되는 텍스트가 올바른지, 용어가 일관적인지 검토하는 과정입니다.",
        "데이터 연결 테스트": "데이터베이스나 서버와의 연결이 원활한지를 확인하는 과정으로, 디자인적 조화보다는 기능적 검증에 가깝습니다."
      }
    },
    {
      "id": 17,
      "question": "UI 설계 도구로 목업(Mockup)의 주된 목적은?",
      "choices": [
        "동적인 프로토타입 제공",
        "실제 화면과 유사한 모형 제공",
        "테스트 문서 작성",
        "설계 규칙 제시"
      ],
      "correct_answer": "실제 화면과 유사한 모형 제공",
      "explanation": "목업(Mockup)은 최종 결과물과 유사한 시각적 디자인을 보여주지만, 동작 기능이 포함되지 않은 정적 모형인 경우가 많습니다.",
      "wrong_answers": {
        "동적인 프로토타입 제공": "목업은 정적인 디자인 모델이며, 동적인 인터랙션이 가능한 프로토타입과는 차이가 있습니다.",
        "테스트 문서 작성": "목업은 UI 디자인을 시각적으로 표현하는 것이 목적이며, 테스트 문서를 작성하는 용도로 사용되지 않습니다.",
        "설계 규칙 제시": "설계 규칙은 UI 표준 및 가이드 문서를 통해 정의되며, 목업은 규칙보다는 시각적 예시를 제공하는 역할을 합니다."
      }
    },
    {
      "id": 18,
      "question": "사용성(Usability)의 정의로 올바른 것은?",
      "choices": [
        "특정한 맥락에서 사용되는 효과성, 효율성, 만족도",
        "UI 구성의 기술적 제약",
        "정보 아키텍처 설계 방식",
        "사용자 요구사항 분석"
      ],
      "correct_answer": "특정한 맥락에서 사용되는 효과성, 효율성, 만족도",
      "explanation": "ISO 9241-11에 따르면 사용성(Usability)은 특정 목표를 달성하는 데 있어서의 효과성(Effectiveness), 효율성(Efficiency), 만족도(Satisfaction)를 포함하는 개념입니다.",
      "wrong_answers": {
        "UI 구성의 기술적 제약": "사용성은 UI의 직관성과 편리성을 평가하는 개념이며, 특정 기술적 제약과는 별개입니다.",
        "정보 아키텍처 설계 방식": "정보 아키텍처(IA) 설계는 사용자가 정보를 쉽게 찾을 수 있도록 구조를 설계하는 과정이지만, 사용성의 정의와는 다릅니다.",
        "사용자 요구사항 분석": "사용자 요구사항 분석은 사용성 향상을 위한 과정 중 하나이지만, 사용성의 정의 자체는 아닙니다."
      }
    },
    {
      "id": 19,
      "question": "UI 설계서 작성 시 고려해야 하는 핵심 요소가 아닌 것은?",
      "choices": ["사용성", "유용성", "하드웨어 스펙", "정보 구조"],
      "correct_answer": "하드웨어 스펙",
      "explanation": "UI 설계서 작성 시 주요 고려 요소는 화면 구성, 정보 구조, 사용성 및 유용성입니다. 하드웨어 스펙은 시스템 인프라의 일부로 UI 설계서의 핵심 요소에 포함되지 않습니다.",
      "wrong_answers": {
        "사용성": "UI 설계의 핵심 요소로, 사용자가 쉽게 사용할 수 있도록 고려해야 합니다.",
        "유용성": "UI가 실제로 필요한 기능을 제공하며, 사용자가 이를 통해 가치를 얻을 수 있어야 합니다.",
        "정보 구조": "화면에 표시되는 정보나 메뉴를 체계적으로 배치하는 것은 UI 설계에서 중요한 부분입니다."
      }
    },
    {
      "id": 20,
      "question": "내비게이션 설계에서 중요한 것은?",
      "choices": [
        "디자인 규칙",
        "사용자 중심의 안내 제공",
        "메뉴의 다양성",
        "색상 조화"
      ],
      "correct_answer": "사용자 중심의 안내 제공",
      "explanation": "내비게이션(Navigation)은 사용자가 원하는 정보를 쉽게 찾고, 기능을 원활하게 수행할 수 있도록 안내하는 것이 가장 중요한 요소입니다.",
      "wrong_answers": {
        "디자인 규칙": "디자인 규칙은 UI 전반에 적용되는 요소이지만, 내비게이션 설계의 핵심 요소라고 보기는 어렵습니다.",
        "메뉴의 다양성": "메뉴의 다양성보다는 필요한 메뉴를 적절한 위치에 배치하여 사용자의 편의성을 높이는 것이 더 중요합니다.",
        "색상 조화": "내비게이션에서 색상의 일관성도 중요하지만, 가장 중요한 요소는 사용자의 이해도와 편의성입니다."
      }
    }
  ]
}
