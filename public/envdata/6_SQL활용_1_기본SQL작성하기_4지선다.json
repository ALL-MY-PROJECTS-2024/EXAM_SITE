{
  "questions": [
    {
      "id": 1,
      "question": "데이터 사전(Data Dictionary)에 대한 설명으로 올바른 것은?",
      "choices": [
        "사용자가 데이터를 수정할 수 있는 공간이다.",
        "데이터베이스의 물리적 데이터만 저장하는 영역이다.",
        "메타 데이터를 저장하며, 주로 읽기 전용으로 제공된다.",
        "데이터베이스 엔진에서 활용되지 않는다."
      ],
      "correct_answer": "메타 데이터를 저장하며, 주로 읽기 전용으로 제공된다.",
      "explanation": "데이터 사전(Data Dictionary)은 데이터베이스의 구조, 제약 조건, 사용자 권한 등의 메타데이터를 저장하는 영역이다. 일반적으로 읽기 전용으로 제공되며, 사용자가 직접 수정할 수 없다.",
      "wrong_answers": {
        "사용자가 데이터를 수정할 수 있는 공간이다.": "데이터 사전은 메타데이터를 관리하는 영역이며, 사용자가 직접 수정할 수 없다.",
        "데이터베이스의 물리적 데이터만 저장하는 영역이다.": "데이터 사전은 데이터의 구조 및 정의를 저장하는 공간이며, 물리적 데이터 자체를 저장하지 않는다.",
        "데이터베이스 엔진에서 활용되지 않는다.": "데이터 사전은 데이터베이스 엔진이 테이블, 뷰, 제약 조건 등의 정보를 관리하는 데 필수적으로 사용된다."
      }
    },
    {
      "id": 2,
      "question": "SQL에서 `DBA_TABLES` 뷰를 사용하는 목적은 무엇인가?",
      "choices": [
        "특정 사용자의 데이터만 확인하기 위해",
        "모든 테이블의 목록을 확인하기 위해",
        "테이블의 데이터 변경 기록을 확인하기 위해",
        "테이블의 열(Column) 목록을 조회하기 위해"
      ],
      "correct_answer": "모든 테이블의 목록을 확인하기 위해",
      "explanation": "`DBA_TABLES` 뷰는 데이터베이스에 존재하는 모든 테이블 목록을 조회하는 데 사용된다.",
      "wrong_answers": {
        "특정 사용자의 데이터만 확인하기 위해": "`DBA_TABLES`는 특정 사용자의 데이터가 아니라 전체 데이터베이스의 테이블 목록을 조회한다.",
        "테이블의 데이터 변경 기록을 확인하기 위해": "`DBA_TABLES`는 테이블 목록을 관리하는 뷰이며, 변경 기록은 `DBA_AUDIT_TRAIL`과 같은 뷰를 사용한다.",
        "테이블의 열(Column) 목록을 조회하기 위해": "테이블의 열 정보를 조회하려면 `DBA_TAB_COLUMNS` 뷰를 사용해야 한다."
      }
    },
    {
      "id": 3,
      "question": "`CREATE TABLE` 문을 사용하는 목적은?",
      "choices": [
        "테이블 데이터를 조회하기 위해",
        "새로운 테이블을 생성하기 위해",
        "테이블 구조를 수정하기 위해",
        "테이블의 데이터를 삭제하기 위해"
      ],
      "correct_answer": "새로운 테이블을 생성하기 위해",
      "explanation": "`CREATE TABLE` 문은 새로운 테이블을 생성할 때 사용된다.",
      "wrong_answers": {
        "테이블 데이터를 조회하기 위해": "데이터 조회는 `SELECT` 문을 사용해야 한다.",
        "테이블 구조를 수정하기 위해": "테이블 구조 수정은 `ALTER TABLE` 문을 사용해야 한다.",
        "테이블의 데이터를 삭제하기 위해": "테이블 데이터 삭제는 `DELETE` 또는 `TRUNCATE` 문을 사용해야 한다."
      }
    },
    {
      "id": 4,
      "question": "다음 중 기본키(PK)에 대한 설명으로 올바른 것은?",
      "choices": [
        "테이블 내에서 중복된 값을 허용한다.",
        "NULL 값을 가질 수 있다.",
        "테이블의 데이터를 고유하게 식별하기 위한 키이다.",
        "다른 테이블의 참조 대상이 될 수 없다."
      ],
      "correct_answer": "테이블의 데이터를 고유하게 식별하기 위한 키이다.",
      "explanation": "기본키(PK)는 테이블 내에서 각 행을 고유하게 식별하기 위한 키이며, 중복과 NULL 값을 허용하지 않는다.",
      "wrong_answers": {
        "테이블 내에서 중복된 값을 허용한다.": "기본키는 유일성을 보장해야 하므로 중복을 허용하지 않는다.",
        "NULL 값을 가질 수 있다.": "기본키는 반드시 값이 존재해야 하므로 NULL 값을 허용하지 않는다.",
        "다른 테이블의 참조 대상이 될 수 없다.": "기본키는 다른 테이블의 외래키(FK)로 참조될 수 있다."
      }
    },
    {
      "id": 5,
      "question": "`SELECT` 문에서 사용하는 조인의 기본 개념은?",
      "choices": [
        "두 개 이상의 테이블을 결합하여 데이터를 추출",
        "테이블의 구조를 변경",
        "테이블 데이터를 삭제",
        "데이터베이스를 삭제"
      ],
      "correct_answer": "두 개 이상의 테이블을 결합하여 데이터를 추출",
      "explanation": "조인은 여러 테이블을 결합하여 필요한 데이터를 추출하는 SQL 연산이다.",
      "wrong_answers": {
        "테이블의 구조를 변경": "`ALTER TABLE` 문을 사용하여 테이블 구조를 변경한다.",
        "테이블 데이터를 삭제": "`DELETE` 문을 사용하여 데이터를 삭제한다.",
        "데이터베이스를 삭제": "`DROP DATABASE` 명령어를 사용하여 데이터베이스를 삭제한다."
      }
    },
    {
      "id": 6,
      "question": "`ALTER TABLE` 명령어의 용도는?",
      "choices": [
        "데이터를 삽입",
        "테이블 구조를 변경",
        "데이터를 삭제",
        "테이블을 조회"
      ],
      "correct_answer": "테이블 구조를 변경",
      "explanation": "`ALTER TABLE` 명령어는 테이블의 구조(열 추가, 삭제, 수정)를 변경하는 데 사용된다.",
      "wrong_answers": {
        "데이터를 삽입": "`INSERT` 문을 사용하여 데이터를 삽입한다.",
        "데이터를 삭제": "`DELETE` 또는 `TRUNCATE` 문을 사용하여 데이터를 삭제한다.",
        "테이블을 조회": "`SELECT` 문을 사용하여 데이터를 조회한다."
      }
    },
    {
      "id": 7,
      "question": "다음 중 외래키(FK)에 대한 설명으로 올바른 것은?",
      "choices": [
        "테이블 간의 데이터 참조를 정의한다.",
        "테이블의 데이터를 삭제한다.",
        "테이블의 열을 추가한다.",
        "테이블을 생성한다."
      ],
      "correct_answer": "테이블 간의 데이터 참조를 정의한다.",
      "explanation": "외래키(FK)는 한 테이블이 다른 테이블의 기본키를 참조할 때 사용된다.",
      "wrong_answers": {
        "테이블의 데이터를 삭제한다.": "데이터 삭제는 `DELETE` 문을 사용한다.",
        "테이블의 열을 추가한다.": "`ALTER TABLE ADD COLUMN`을 사용하여 열을 추가할 수 있다.",
        "테이블을 생성한다.": "`CREATE TABLE` 문을 사용하여 테이블을 생성한다."
      }
    },
    {
      "id": 8,
      "question": "SQL에서 `NOT NULL` 제약 조건은 무엇을 의미하는가?",
      "choices": [
        "열에 중복된 값을 허용하지 않음",
        "열에 NULL 값을 허용하지 않음",
        "열을 기본 키로 설정함",
        "열의 데이터를 삭제함"
      ],
      "correct_answer": "열에 NULL 값을 허용하지 않음",
      "explanation": "`NOT NULL` 제약 조건은 특정 열에 NULL 값을 허용하지 않도록 강제하는 역할을 한다.",
      "wrong_answers": {
        "열에 중복된 값을 허용하지 않음": "`NOT NULL`은 중복과는 관련이 없으며, NULL 값만 허용하지 않는다.",
        "열을 기본 키로 설정함": "기본 키는 `PRIMARY KEY` 제약 조건을 사용하여 설정한다.",
        "열의 데이터를 삭제함": "데이터 삭제는 `DELETE` 또는 `TRUNCATE` 문을 사용하여 수행한다."
      }
    },
    {
      "id": 9,
      "question": "`INNER JOIN`의 동작 방식은?",
      "choices": [
        "두 테이블 간의 모든 조합을 반환",
        "두 테이블 간의 공통 값을 기반으로 데이터를 반환",
        "하나의 테이블만 반환",
        "두 테이블의 모든 데이터를 반환"
      ],
      "correct_answer": "두 테이블 간의 공통 값을 기반으로 데이터를 반환",
      "explanation": "`INNER JOIN`은 두 테이블에서 공통되는 값을 가진 행만 반환하는 조인 방식이다.",
      "wrong_answers": {
        "두 테이블 간의 모든 조합을 반환": "이 방식은 `CROSS JOIN`에 해당한다.",
        "하나의 테이블만 반환": "조인은 두 개 이상의 테이블을 결합하여 데이터를 반환하는 SQL 연산이다.",
        "두 테이블의 모든 데이터를 반환": "`FULL OUTER JOIN`은 두 테이블의 모든 데이터를 반환할 수 있다."
      }
    },
    {
      "id": 10,
      "question": "`UNION` 연산자의 특징은?",
      "choices": [
        "중복을 제거한 합집합 결과를 반환",
        "중복을 허용한 합집합 결과를 반환",
        "테이블 간의 교집합 결과를 반환",
        "테이블의 데이터를 삭제"
      ],
      "correct_answer": "중복을 제거한 합집합 결과를 반환",
      "explanation": "`UNION` 연산자는 두 개의 SELECT 결과를 합치면서 중복된 데이터를 제거하여 반환한다.",
      "wrong_answers": {
        "중복을 허용한 합집합 결과를 반환": "`UNION ALL`을 사용하면 중복을 허용한 결과를 반환할 수 있다.",
        "테이블 간의 교집합 결과를 반환": "`INTERSECT` 연산자는 두 테이블 간의 교집합을 반환하는 연산이다.",
        "테이블의 데이터를 삭제": "`DELETE` 또는 `TRUNCATE` 문을 사용하여 데이터를 삭제할 수 있다."
      }
    },
    {
      "id": 11,
      "question": "`ROLLBACK` 명령어의 역할은?",
      "choices": [
        "트랜잭션을 확정",
        "트랜잭션을 취소",
        "트랜잭션을 저장",
        "트랜잭션을 종료"
      ],
      "correct_answer": "트랜잭션을 취소",
      "explanation": "`ROLLBACK` 명령어는 현재 진행 중인 트랜잭션을 취소하고 마지막 `COMMIT` 또는 `SAVEPOINT` 상태로 되돌린다.",
      "wrong_answers": {
        "트랜잭션을 확정": "트랜잭션 확정은 `COMMIT` 명령어를 사용해야 한다.",
        "트랜잭션을 저장": "`SAVEPOINT` 명령어를 사용하면 특정 시점까지 트랜잭션을 저장할 수 있다.",
        "트랜잭션을 종료": "트랜잭션 종료는 `COMMIT` 또는 `ROLLBACK`을 사용하여 처리할 수 있다."
      }
    },
    {
      "id": 12,
      "question": "SQL에서 `CHECK` 제약 조건의 목적은?",
      "choices": [
        "열에 기본값을 지정",
        "열에 데이터 타입을 변경",
        "열 값의 범위를 제한",
        "열에 NULL 값을 허용"
      ],
      "correct_answer": "열 값의 범위를 제한",
      "explanation": "`CHECK` 제약 조건은 특정 열의 값이 지정된 조건을 만족하도록 제한하는 역할을 한다.",
      "wrong_answers": {
        "열에 기본값을 지정": "`DEFAULT` 제약 조건을 사용하여 열의 기본값을 지정할 수 있다.",
        "열에 데이터 타입을 변경": "데이터 타입 변경은 `ALTER TABLE MODIFY`를 사용해야 한다.",
        "열에 NULL 값을 허용": "NULL 허용 여부는 `NOT NULL` 제약 조건을 통해 설정할 수 있다."
      }
    },
    {
      "id": 13,
      "question": "`LEFT OUTER JOIN`은 무엇을 반환하는가?",
      "choices": [
        "왼쪽 테이블의 데이터만 반환",
        "오른쪽 테이블의 데이터만 반환",
        "왼쪽 테이블의 모든 데이터와 오른쪽 테이블의 일치하는 데이터 반환",
        "양쪽 테이블의 모든 데이터 반환"
      ],
      "correct_answer": "왼쪽 테이블의 모든 데이터와 오른쪽 테이블의 일치하는 데이터 반환",
      "explanation": "`LEFT OUTER JOIN`은 왼쪽 테이블의 모든 행과 오른쪽 테이블에서 일치하는 데이터를 반환하며, 일치하는 데이터가 없으면 `NULL`을 반환한다.",
      "wrong_answers": {
        "왼쪽 테이블의 데이터만 반환": "왼쪽 테이블의 데이터만 반환하는 것이 아니라 오른쪽 테이블과 일치하는 데이터를 함께 가져온다.",
        "오른쪽 테이블의 데이터만 반환": "오른쪽 테이블만 반환하려면 `RIGHT OUTER JOIN`을 사용해야 한다.",
        "양쪽 테이블의 모든 데이터 반환": "양쪽 테이블의 모든 데이터를 반환하는 것은 `FULL OUTER JOIN`이다."
      }
    },
    {
      "id": 14,
      "question": "`GRANT` 명령어의 용도는?",
      "choices": [
        "테이블 구조를 변경",
        "사용자 권한을 부여",
        "데이터를 삽입",
        "테이블 데이터를 삭제"
      ],
      "correct_answer": "사용자 권한을 부여",
      "explanation": "`GRANT` 명령어는 특정 사용자나 역할(Role)에게 데이터베이스 객체에 대한 접근 권한을 부여하는 데 사용된다.",
      "wrong_answers": {
        "테이블 구조를 변경": "`ALTER TABLE` 명령어를 사용하여 테이블 구조를 변경할 수 있다.",
        "데이터를 삽입": "데이터 삽입은 `INSERT INTO` 명령어를 사용해야 한다.",
        "테이블 데이터를 삭제": "데이터 삭제는 `DELETE` 또는 `TRUNCATE` 명령어를 사용한다."
      }
    },
    {
      "id": 15,
      "question": "`PRIMARY KEY`와 `UNIQUE`의 차이점은?",
      "choices": [
        "둘 다 NULL 값을 허용한다.",
        "`PRIMARY KEY`는 테이블당 여러 개 존재 가능하다.",
        "`UNIQUE`는 여러 개의 열에 적용 가능하다.",
        "`PRIMARY KEY`는 NULL 값을 허용하지 않는다."
      ],
      "correct_answer": "`PRIMARY KEY`는 NULL 값을 허용하지 않는다.",
      "explanation": "`PRIMARY KEY`는 테이블에서 유일성을 보장하며, NULL 값을 허용하지 않는다.",
      "wrong_answers": {
        "둘 다 NULL 값을 허용한다.": "`PRIMARY KEY`는 NULL 값을 허용하지 않지만, `UNIQUE`는 NULL 값을 허용할 수 있다.",
        "`PRIMARY KEY`는 테이블당 여러 개 존재 가능하다.": "테이블당 하나의 `PRIMARY KEY`만 존재할 수 있다.",
        "`UNIQUE`는 여러 개의 열에 적용 가능하다.": "`UNIQUE` 제약 조건은 여러 개의 열에 적용 가능하지만, 이는 `PRIMARY KEY`와의 차이점이 아니다."
      }
    }
  ]
}
