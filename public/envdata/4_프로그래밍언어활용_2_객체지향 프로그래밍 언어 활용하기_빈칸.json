{
  "questions": [
    {
      "id": 1,
      "question": "객체지향 프로그래밍의 4가지 주요 속성은 ________, ________, ________, ________이다.",
      "answer": "캡슐화, 상속, 다형성, 추상화"
    },
    {
      "id": 2,
      "question": "상속을 통해 부모 클래스에서 자식 클래스로 ________과(와) ________이(가) 전달된다.",
      "answer": "속성, 메소드"
    },
    {
      "id": 3,
      "question": "클래스 다이어그램에서 클래스의 속성은 ________으로, 메소드는 ________으로 나타낸다.",
      "answer": "필드, 연산"
    },
    {
      "id": 4,
      "question": "다형성은 동일한 ________가 다양한 방식으로 동작하는 객체지향 언어의 특징이다.",
      "answer": "인터페이스"
    },
    {
      "id": 5,
      "question": "인터페이스는 ________ 메소드만 포함하며, 이를 통해 ________를 제공한다.",
      "answer": "추상, 다형성"
    },
    {
      "id": 6,
      "question": "객체지향 설계 원칙 중 리스코프 치환 원칙은 ________이(가) 부모 클래스를 대체할 수 있어야 한다는 원칙이다.",
      "answer": "자식 클래스"
    },
    {
      "id": 7,
      "question": "UML 다이어그램 중 객체 간의 시간 순서에 따른 상호작용을 나타내는 것은 ________이다.",
      "answer": "시퀀스 다이어그램"
    },
    {
      "id": 8,
      "question": "추상 클래스는 하나 이상의 ________ 메소드를 포함하며, 이를 통해 자식 클래스가 ________해야 한다.",
      "answer": "추상, 구현"
    },
    {
      "id": 9,
      "question": "객체지향 언어에서 캡슐화를 구현하기 위해 ________를(을) 사용하여 데이터 접근을 제어한다.",
      "answer": "접근 제어자"
    },
    {
      "id": 11,
      "question": "의존 역전 원칙은 ________에 의존하지 않고 ________에 의존해야 한다는 원칙이다.",
      "correct_answer": "구체적 구현, 추상화",
      "explanation": "의존 역전 원칙(DIP, Dependency Inversion Principle)은 고수준 모듈이 저수준 모듈에 의존하는 것이 아니라, 추상화된 인터페이스나 상위 클래스를 통해 의존성을 관리해야 한다는 원칙입니다. 이를 통해 유연성과 확장성을 높일 수 있습니다."
    },
    {
      "id": 12,
      "question": "객체지향 프로그래밍에서 객체는 상태를 나타내는 ________와(과) 동작을 정의하는 ________로 구성된다.",
      "correct_answer": "속성, 메소드",
      "explanation": "객체(Object)는 속성(멤버 변수)과 메소드(동작)로 구성됩니다. 속성은 객체의 상태를 저장하며, 메소드는 객체의 동작을 정의하여 특정 기능을 수행하도록 합니다."
    },
    {
      "id": 13,
      "question": "인터페이스는 객체 간의 ________를 정의하는 데 사용된다.",
      "correct_answer": "계약",
      "explanation": "인터페이스(Interface)는 클래스들이 동일한 방식으로 동작하도록 강제하는 계약(Contract)의 역할을 합니다. 이를 통해 다형성을 구현하고, 시스템 간의 결합도를 낮출 수 있습니다."
    },
    {
      "id": 14,
      "question": "접근 제어자 중 ________는 클래스 내부에서만 사용 가능한 데이터를 보호한다.",
      "correct_answer": "private",
      "explanation": "private 접근 제어자는 클래스 내부에서만 접근할 수 있도록 데이터를 보호하는 역할을 합니다. 이를 통해 외부에서 직접 데이터를 변경할 수 없도록 제한하고, 캡슐화 원칙을 준수할 수 있습니다."
    },
    {
      "id": 15,
      "question": "객체지향 설계에서 유스케이스 다이어그램은 ________와(과) ________의 관계를 시각화한다.",
      "correct_answer": "액터, 유스케이스",
      "explanation": "유스케이스 다이어그램(Use Case Diagram)은 액터(Actor)와 유스케이스(Use Case) 간의 관계를 나타냅니다. 액터는 시스템과 상호작용하는 사용자를 의미하며, 유스케이스는 사용자가 수행할 수 있는 기능을 나타냅니다."
    }
  ]
}
