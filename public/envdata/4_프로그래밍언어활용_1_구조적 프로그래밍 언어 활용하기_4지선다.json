{
  "questions": [
    {
      "id": 1,
      "question": "구조적 프로그래밍의 기본 설계 구조에 해당하지 않는 것은?",
      "choices": ["순차 구조", "선택 구조", "반복 구조", "동적 구조"],
      "correct_answer": "동적 구조",
      "explanation": "구조적 프로그래밍은 순차 구조, 선택 구조, 반복 구조의 세 가지 기본 설계 구조를 따릅니다. 동적 구조는 구조적 프로그래밍의 기본 설계 요소가 아닙니다.",
      "wrong_answers": {
        "순차 구조": "프로그램이 위에서 아래로 순차적으로 실행되는 구조입니다.",
        "선택 구조": "조건문을 사용하여 실행 흐름을 결정하는 구조입니다.",
        "반복 구조": "루프를 사용하여 특정 부분을 반복 실행하는 구조입니다."
      }
    },
    {
      "id": 2,
      "question": "구조적 프로그래밍 설계에서 사용하는 대표적인 분석 도구는 무엇인가?",
      "choices": ["UML", "DFD", "JSON", "SQL"],
      "correct_answer": "DFD",
      "explanation": "데이터 흐름도(DFD)는 구조적 프로그래밍에서 데이터의 흐름과 처리를 시각적으로 표현하는 대표적인 분석 도구입니다.",
      "wrong_answers": {
        "UML": "UML은 객체지향 프로그래밍에서 주로 사용되는 모델링 언어입니다.",
        "JSON": "JSON은 데이터 저장 및 전송을 위한 경량 데이터 포맷으로 분석 도구가 아닙니다.",
        "SQL": "SQL은 데이터베이스 질의 언어이며, 프로그래밍 설계 분석 도구가 아닙니다."
      }
    },
    {
      "id": 3,
      "question": "구조적 프로그래밍의 설계 단계에서 사용하는 다이어그램 중 데이터의 상태 변화를 나타내는 것은?",
      "choices": ["DFD", "STD", "ERD", "UML"],
      "correct_answer": "STD",
      "explanation": "상태 전이 다이어그램(STD, State Transition Diagram)은 데이터의 상태 변화와 전이 과정을 나타냅니다.",
      "wrong_answers": {
        "DFD": "DFD는 데이터의 흐름과 처리를 표현하는 다이어그램입니다.",
        "ERD": "ERD는 데이터베이스 설계를 위한 개체 관계 다이어그램입니다.",
        "UML": "UML은 객체지향 시스템의 모델링을 위한 다이어그램입니다."
      }
    },
    {
      "id": 4,
      "question": "구조적 프로그래밍 설계 요소 중 데이터 이동을 시각적으로 표현하는 것은?",
      "choices": ["소단위 명세", "데이터 흐름도", "자료사전", "상태 전이도"],
      "correct_answer": "데이터 흐름도",
      "explanation": "데이터 흐름도(DFD)는 시스템 내에서 데이터가 어떻게 이동하는지를 시각적으로 표현하는 설계 도구입니다.",
      "wrong_answers": {
        "소단위 명세": "소단위 명세는 모듈의 상세한 동작을 기술하는 문서입니다.",
        "자료사전": "자료사전은 시스템 내에서 사용되는 데이터의 정의를 기록한 문서입니다.",
        "상태 전이도": "상태 전이도(STD)는 데이터의 상태 변화를 표현하는 다이어그램입니다."
      }
    },
    {
      "id": 5,
      "question": "프로그램을 설계할 때 모듈 간의 상호 의존성을 낮추기 위해 고려해야 하는 요소는?",
      "choices": ["응집도", "결합도", "명세도", "설계도"],
      "correct_answer": "결합도",
      "explanation": "결합도(Coupling)를 낮추면 모듈 간의 의존성이 줄어들어 유지보수가 용이해집니다.",
      "wrong_answers": {
        "응집도": "응집도는 모듈 내 기능의 관련성을 나타내며 높이는 것이 좋습니다.",
        "명세도": "명세도는 시스템 요구사항을 정리한 문서로, 모듈 의존성과 직접적인 관련이 없습니다.",
        "설계도": "설계도는 시스템의 구조를 시각적으로 표현하는 자료로, 모듈 간 의존성을 직접적으로 줄이는 요소는 아닙니다."
      }
    },
    {
      "id": 6,
      "question": "DFD 설계에서 데이터 저장소를 나타내는 표기법은 무엇인가?",
      "choices": ["사각형", "두 개의 평행선", "화살표", "원"],
      "correct_answer": "두 개의 평행선",
      "explanation": "DFD에서 데이터 저장소는 두 개의 평행선으로 표기됩니다.",
      "wrong_answers": {
        "사각형": "사각형은 외부 엔티티를 나타냅니다.",
        "화살표": "화살표는 데이터의 흐름을 나타냅니다.",
        "원": "원은 프로세스를 나타냅니다."
      }
    },
    {
      "id": 7,
      "question": "구조적 프로그래밍 설계의 하향식 기법으로 데이터를 시각적으로 표현한 다이어그램은?",
      "choices": ["ERD", "DFD", "UML", "STD"],
      "correct_answer": "DFD",
      "explanation": "DFD(데이터 흐름도)는 구조적 프로그래밍에서 데이터의 흐름과 처리를 시각적으로 표현하는 다이어그램입니다.",
      "wrong_answers": {
        "ERD": "ERD(개체 관계 다이어그램)는 데이터베이스의 구조를 표현하는 데 사용됩니다.",
        "UML": "UML은 객체지향 프로그래밍에서 시스템을 모델링하는 데 사용됩니다.",
        "STD": "STD(상태 전이 다이어그램)는 데이터의 상태 변화를 나타냅니다."
      }
    },
    {
      "id": 8,
      "question": "반복 구조에서 사용하는 주요 키워드는?",
      "choices": ["if-else", "for, while", "switch", "goto"],
      "correct_answer": "for, while",
      "explanation": "반복 구조에서는 `for`, `while` 같은 루프 키워드를 사용하여 특정 코드 블록을 반복 실행합니다.",
      "wrong_answers": {
        "if-else": "if-else는 선택 구조에서 조건에 따라 실행 흐름을 제어하는 키워드입니다.",
        "switch": "switch는 여러 경우(case)에 따라 분기 처리를 수행하는 선택 구조입니다.",
        "goto": "goto는 비구조적 프로그래밍에서 사용되며, 일반적으로 반복 구조에서 사용되지 않습니다."
      }
    },
    {
      "id": 9,
      "question": "구조적 프로그래밍에서 모듈의 독립성을 높이기 위해 고려해야 하는 것은?",
      "choices": ["모듈화", "코드 재사용", "데이터 연속성", "기능 설계"],
      "correct_answer": "모듈화",
      "explanation": "모듈화를 통해 코드의 독립성을 높이고 유지보수를 용이하게 할 수 있습니다.",
      "wrong_answers": {
        "코드 재사용": "코드 재사용은 중요하지만, 모듈 독립성을 보장하는 직접적인 요소는 아닙니다.",
        "데이터 연속성": "데이터 연속성은 데이터의 일관성을 유지하는 개념으로, 모듈 독립성과는 관련이 적습니다.",
        "기능 설계": "기능 설계는 시스템 전체의 구조를 설계하는 개념으로 모듈 독립성을 높이는 직접적인 방법은 아닙니다."
      }
    },
    {
      "id": 10,
      "question": "다음 중 C 언어의 특징이 아닌 것은?",
      "choices": [
        "이식성이 좋다.",
        "고급 언어와 저급 언어의 특성을 동시에 가진다.",
        "절차지향 언어이다.",
        "인터프리터 언어이다."
      ],
      "correct_answer": "인터프리터 언어이다.",
      "explanation": "C 언어는 컴파일러를 사용하여 실행 파일을 생성하는 컴파일 언어이며, 인터프리터 언어가 아닙니다.",
      "wrong_answers": {
        "이식성이 좋다.": "C 언어는 다양한 플랫폼에서 실행할 수 있도록 이식성이 뛰어납니다.",
        "고급 언어와 저급 언어의 특성을 동시에 가진다.": "C 언어는 하드웨어를 직접 제어할 수 있는 저급 언어의 특징과 고급 언어의 특징을 함께 갖습니다.",
        "절차지향 언어이다.": "C 언어는 구조적 프로그래밍을 기반으로 한 절차지향 언어입니다."
      }
    },

    {
      "id": 11,
      "question": "구조적 프로그래밍에서 반복 구조를 표현할 때 사용하는 기본 명령어는?",
      "choices": ["if-else", "switch", "for, while", "return"],
      "correct_answer": "for, while",
      "explanation": "반복 구조에서는 `for`, `while`과 같은 루프 명령어를 사용하여 특정 코드 블록을 반복 실행합니다.",
      "wrong_answers": {
        "if-else": "if-else는 조건문으로, 특정 조건에 따라 실행 흐름을 결정하는 선택 구조입니다.",
        "switch": "switch는 여러 경우(case)에 따라 분기 처리를 수행하는 선택 구조입니다.",
        "return": "return은 함수 실행을 종료하고 값을 반환하는 명령어이며, 반복 구조와 직접적인 관련이 없습니다."
      }
    },
    {
      "id": 12,
      "question": "데이터 흐름도에서 프로세스를 표현하는 기호는 무엇인가?",
      "choices": ["사각형", "평행선", "원", "화살표"],
      "correct_answer": "원",
      "explanation": "데이터 흐름도(DFD)에서 프로세스는 원(circle) 또는 타원(oval) 형태로 표현됩니다.",
      "wrong_answers": {
        "사각형": "사각형은 외부 엔티티를 나타냅니다.",
        "평행선": "평행선은 데이터 저장소를 나타냅니다.",
        "화살표": "화살표는 데이터의 흐름을 나타냅니다."
      }
    },
    {
      "id": 13,
      "question": "상태 전이도를 작성할 때 나타내는 것은?",
      "choices": [
        "상태의 변경 과정",
        "데이터의 이동 과정",
        "모듈 간 결합도",
        "사용자 요구사항"
      ],
      "correct_answer": "상태의 변경 과정",
      "explanation": "상태 전이도(STD, State Transition Diagram)는 시스템 또는 객체의 상태 변화와 전이 과정을 나타냅니다.",
      "wrong_answers": {
        "데이터의 이동 과정": "데이터의 이동 과정은 데이터 흐름도(DFD)에서 표현됩니다.",
        "모듈 간 결합도": "결합도는 모듈 간의 의존성을 나타내는 개념으로 상태 전이도와 관련이 없습니다.",
        "사용자 요구사항": "사용자 요구사항은 소프트웨어 개발 과정에서 수집하는 정보이며, 상태 전이도의 주된 목적과는 다릅니다."
      }
    },
    {
      "id": 14,
      "question": "구조적 프로그래밍 설계서에서 DFD의 주요 구성 요소가 아닌 것은?",
      "choices": ["프로세스", "데이터 흐름", "데이터 저장소", "클래스"],
      "correct_answer": "클래스",
      "explanation": "DFD(데이터 흐름도)는 프로세스, 데이터 흐름, 데이터 저장소, 외부 엔티티로 구성되며, 클래스는 객체지향 프로그래밍에서 사용되는 개념입니다.",
      "wrong_answers": {
        "프로세스": "프로세스는 데이터를 변환하거나 처리하는 작업을 나타냅니다.",
        "데이터 흐름": "데이터 흐름은 시스템 내에서 데이터가 어떻게 이동하는지를 표현합니다.",
        "데이터 저장소": "데이터 저장소는 시스템 내에서 데이터를 저장하는 장소를 나타냅니다."
      }
    },
    {
      "id": 15,
      "question": "소단위 명세는 주로 무엇을 사용하여 작성하는가?",
      "choices": ["JSON", "XML", "N-S 차트", "DFD"],
      "correct_answer": "N-S 차트",
      "explanation": "N-S 차트(Nassi-Shneiderman Chart)는 소단위 명세를 시각적으로 표현하는 기법입니다.",
      "wrong_answers": {
        "JSON": "JSON은 데이터 교환 및 저장을 위한 형식으로, 소단위 명세에 사용되지 않습니다.",
        "XML": "XML은 데이터 표현을 위한 마크업 언어로, 소단위 명세와 직접적인 관련이 없습니다.",
        "DFD": "DFD(데이터 흐름도)는 시스템 내 데이터의 흐름을 표현하는 다이어그램으로, 소단위 명세를 직접 작성하는 도구는 아닙니다."
      }
    }
  ]
}
