{
  "questions": [
    {
      "id": 1,
      "question": "빌드는 소스코드를 실행 가능한 상태로 변환하는 과정으로, 컴파일 언어의 빌드 과정에 포함되지 않는 단계는?",
      "choices": ["전처리기", "파싱", "링킹", "동적 배포"],
      "correct_answer": "동적 배포",
      "explanation": "컴파일 언어의 빌드 과정에는 전처리기, 파싱, 링킹 등의 과정이 포함되지만, 동적 배포는 실행 환경에서 이루어지는 배포 과정으로 빌드 단계와는 다르다.",
      "wrong_answers": {
        "전처리기": "소스 코드의 전처리를 담당하며, 매크로 확장 및 헤더 파일 포함 등의 작업을 수행한다.",
        "파싱": "소스 코드를 분석하여 문법적으로 올바른지 확인하고, AST(Abstract Syntax Tree)를 생성하는 과정이다.",
        "링킹": "컴파일된 개별 모듈을 결합하여 실행 가능한 프로그램을 만드는 과정이다."
      }
    },
    {
      "id": 2,
      "question": "Byte Code 언어의 주요 특징은?",
      "choices": [
        "실행 파일을 바로 생성한다.",
        "한 줄씩 번역하여 실행한다.",
        "JRE 또는 CLI 환경에서 실행된다.",
        "빌드 과정이 오래 걸린다."
      ],
      "correct_answer": "JRE 또는 CLI 환경에서 실행된다.",
      "explanation": "Byte Code는 특정 플랫폼에 독립적이며, 실행을 위해 JVM(Java Virtual Machine) 또는 CLI(Common Language Infrastructure) 같은 런타임 환경이 필요하다.",
      "wrong_answers": {
        "실행 파일을 바로 생성한다.": "Byte Code는 기계어가 아니라 중간 코드로, 직접 실행 가능한 바이너리 파일을 생성하지 않는다.",
        "한 줄씩 번역하여 실행한다.": "이 방식은 인터프리터 언어의 특징이며, Byte Code는 보통 JIT(Just-In-Time) 컴파일러에 의해 변환된다.",
        "빌드 과정이 오래 걸린다.": "Byte Code 변환 과정은 상대적으로 빠르며, 빌드 시간이 오래 걸리는 것은 언어와 환경에 따라 다르다."
      }
    },
    {
      "id": 3,
      "question": "웹 서버(Web Server)의 주요 역할은?",
      "choices": [
        "동적 처리를 수행한다.",
        "정적 리소스를 배포한다.",
        "프로그램 실행을 담당한다.",
        "UI 배포를 수행한다."
      ],
      "correct_answer": "정적 리소스를 배포한다.",
      "explanation": "웹 서버는 HTML, CSS, JavaScript, 이미지 등의 정적 리소스를 제공하는 역할을 수행한다.",
      "wrong_answers": {
        "동적 처리를 수행한다.": "동적 처리는 주로 WAS(Web Application Server)가 담당한다.",
        "프로그램 실행을 담당한다.": "웹 서버 자체는 프로그램 실행보다는 요청을 처리하고 리소스를 제공하는 역할을 한다.",
        "UI 배포를 수행한다.": "UI 배포는 일반적으로 프런트엔드 빌드 시스템이 담당하며, 웹 서버는 이를 제공하는 역할을 한다."
      }
    },
    {
      "id": 4,
      "question": "WAS(Web Application Server)의 구성에서 Biz 배포 영역에 포함되지 않는 것은?",
      "choices": ["EJB", "POJO 서비스", "Servlet", "UI 배포 영역"],
      "correct_answer": "UI 배포 영역",
      "explanation": "Biz 배포 영역에는 주로 비즈니스 로직을 수행하는 EJB, POJO 서비스, Servlet 등이 포함되며, UI 배포 영역은 별도로 존재한다.",
      "wrong_answers": {
        "EJB": "Enterprise Java Beans으로, 비즈니스 로직을 수행하는 컴포넌트이다.",
        "POJO 서비스": "Plain Old Java Object 기반의 서비스로, 비즈니스 로직을 처리한다.",
        "Servlet": "Java 기반의 웹 애플리케이션에서 클라이언트 요청을 처리하는 구성 요소이다."
      }
    },
    {
      "id": 5,
      "question": "다음 중 애플리케이션 배포 시 사용하는 Java 패키징 형식이 아닌 것은?",
      "choices": ["jar", "war", "ear", "exe"],
      "correct_answer": "exe",
      "explanation": "Java는 기본적으로 `jar`, `war`, `ear`와 같은 패키징 형식을 사용하며, `exe`는 Windows 실행 파일로 Java 애플리케이션 배포와 관련이 없다.",
      "wrong_answers": {
        "jar": "Java Archive의 약자로, Java 클래스 및 라이브러리를 포함하는 압축 파일 형식이다.",
        "war": "Web Application Archive의 약자로, 웹 애플리케이션을 패키징하는 형식이다.",
        "ear": "Enterprise Archive의 약자로, 여러 개의 모듈을 포함하는 엔터프라이즈 애플리케이션 패키징 형식이다."
      }
    },
    {
      "id": 6,
      "question": "형상관리 시스템에서 형상항목(Configuration Item)은 무엇을 의미하는가?",
      "choices": [
        "형상관리 대상이 되는 항목",
        "소프트웨어 개발 프로세스",
        "사용자 인터페이스",
        "하드웨어 자원"
      ],
      "correct_answer": "형상관리 대상이 되는 항목",
      "explanation": "형상항목(Configuration Item, CI)은 형상관리가 필요한 문서, 소스코드, 실행 파일 등의 개별 요소를 의미한다.",
      "wrong_answers": {
        "소프트웨어 개발 프로세스": "형상관리 시스템은 소프트웨어 개발 프로세스를 관리하지만, 직접적인 구성 요소는 아니다.",
        "사용자 인터페이스": "UI는 형상관리 대상이 될 수 있지만, 형상항목의 정의 자체는 아니다.",
        "하드웨어 자원": "형상관리는 주로 소프트웨어 관련 항목을 대상으로 하며, 하드웨어는 별도의 관리 체계가 필요하다."
      }
    },
    {
      "id": 7,
      "question": "형상관리 시스템에서 '반출(Check Out)'의 의미는?",
      "choices": [
        "형상항목을 리포지터리로 전송하는 것",
        "형상항목을 리포지터리에서 가져오는 것",
        "형상항목의 버전을 삭제하는 것",
        "형상항목을 변경하지 않는 것"
      ],
      "correct_answer": "형상항목을 리포지터리에서 가져오는 것",
      "explanation": "Check Out은 형상관리 시스템에서 특정 항목을 가져와 수정할 수 있도록 하는 작업이다.",
      "wrong_answers": {
        "형상항목을 리포지터리로 전송하는 것": "이 작업은 Check In에 해당한다.",
        "형상항목의 버전을 삭제하는 것": "삭제는 일반적으로 'Remove' 또는 'Delete'라는 용어를 사용한다.",
        "형상항목을 변경하지 않는 것": "반출된 파일은 변경이 가능하며, 변경하지 않는 것은 읽기 전용 상태로 유지하는 것과 다르다."
      }
    },

    {
      "id": 8,
      "question": "애플리케이션 배포환경 구성 시 프로젝트의 애플리케이션 기술적 특성을 확인할 때 가장 먼저 고려해야 할 것은?",
      "choices": ["개발언어", "네트워크 속도", "사용자 수", "하드웨어 성능"],
      "correct_answer": "개발언어",
      "explanation": "애플리케이션의 배포 환경을 구성할 때 가장 먼저 고려해야 할 요소는 개발언어이다. 개발언어에 따라 필요한 런타임 환경, 프레임워크, 패키징 방식 등이 달라지기 때문이다.",
      "wrong_answers": {
        "네트워크 속도": "네트워크 속도는 배포 환경의 성능에 영향을 미칠 수 있지만, 가장 우선적으로 고려해야 할 요소는 아니다.",
        "사용자 수": "사용자 수는 확장성을 고려해야 할 요소지만, 배포 환경의 기본적인 기술적 특성을 결정하는 요소는 아니다.",
        "하드웨어 성능": "하드웨어 성능은 배포 후 최적화를 고려할 때 중요한 요소이지만, 배포 환경을 구성할 때 가장 먼저 고려되는 요소는 아니다."
      }
    },
    {
      "id": 9,
      "question": "형상관리 시스템에서 '기준선(Baseline)'이란 무엇을 의미하는가?",
      "choices": [
        "개발 단계에서 폐기된 항목",
        "공식적으로 검토되고 협의된 형상항목 집합체",
        "자동화된 테스트 과정",
        "배포 과정에서 생성된 로그 파일"
      ],
      "correct_answer": "공식적으로 검토되고 협의된 형상항목 집합체",
      "explanation": "기준선(Baseline)은 특정 시점에서 공식적으로 검토되고 승인된 형상항목의 집합으로, 이후 변경이 발생할 경우 이를 기준으로 변경 사항을 관리한다.",
      "wrong_answers": {
        "개발 단계에서 폐기된 항목": "기준선은 폐기된 항목이 아니라 공식적으로 승인된 버전을 의미한다.",
        "자동화된 테스트 과정": "테스트 과정과는 무관하며, 형상관리의 개념이다.",
        "배포 과정에서 생성된 로그 파일": "로그 파일은 시스템 운영 과정에서 생성되는 것이며, 기준선의 개념과 관련이 없다."
      }
    },
    {
      "id": 10,
      "question": "애플리케이션 배포환경에서 배포 단위를 묶어 배포할 수 있는 Java의 방식은?",
      "choices": ["xml", "csv", "jar, war, ear", "txt"],
      "correct_answer": "jar, war, ear",
      "explanation": "Java 애플리케이션 배포 시 주요 패키징 형식은 `jar`, `war`, `ear`로, 각각 일반 Java 애플리케이션, 웹 애플리케이션, 엔터프라이즈 애플리케이션을 위한 패키징 방식이다.",
      "wrong_answers": {
        "xml": "XML은 데이터 저장 및 설정 파일로 사용되지만, 배포 단위를 묶는 방식은 아니다.",
        "csv": "CSV는 데이터 교환 형식이지 애플리케이션 배포와 관련이 없다.",
        "txt": "TXT 파일은 일반적인 텍스트 파일이며, Java 애플리케이션 배포 방식과 관련이 없다."
      }
    },
    {
      "id": 11,
      "question": "소프트웨어 형상관리의 주요 목적은?",
      "choices": [
        "개발 환경 자동화",
        "형상항목 간의 일관성과 추적성 확보",
        "데이터 압축",
        "사용자 데이터 암호화"
      ],
      "correct_answer": "형상항목 간의 일관성과 추적성 확보",
      "explanation": "소프트웨어 형상관리(SCM)는 소프트웨어 개발 과정에서 형상항목(Configuration Item) 간의 일관성과 추적성을 유지하며 변경 사항을 효과적으로 관리하는 것을 목적으로 한다.",
      "wrong_answers": {
        "개발 환경 자동화": "형상관리는 개발 환경의 자동화보다는 변경 관리 및 버전 관리에 중점을 둔다.",
        "데이터 압축": "데이터 압축은 형상관리의 목적이 아니라, 저장 공간 절약을 위한 별도의 기술이다.",
        "사용자 데이터 암호화": "형상관리는 보안보다는 소프트웨어 변경 관리에 초점을 맞춘다."
      }
    },
    {
      "id": 12,
      "question": "배포 대상 리소스 유형별 배포 방식 중 '웹 리소스'에 해당하는 것은?",
      "choices": ["프로그램", "XML 파일", "HTML, 이미지", "jar 파일"],
      "correct_answer": "HTML, 이미지",
      "explanation": "웹 리소스에는 HTML, CSS, JavaScript 파일, 이미지 등 정적 콘텐츠가 포함되며, 웹 서버를 통해 배포된다.",
      "wrong_answers": {
        "프로그램": "프로그램은 실행 가능한 바이너리 파일이나 애플리케이션을 의미하며, 웹 리소스와는 구분된다.",
        "XML 파일": "XML 파일은 설정 파일로 활용되지만, 웹 리소스로 직접 분류되지 않는다.",
        "jar 파일": "JAR 파일은 Java 애플리케이션을 패키징하는 형식으로, 웹 리소스가 아니다."
      }
    },
    {
      "id": 13,
      "question": "형상관리 시스템에서 '리포지터리(Repository)'는 무엇을 의미하는가?",
      "choices": [
        "소프트웨어 실행 환경",
        "관리 대상을 저장하는 공간",
        "배포 로그 파일",
        "소스코드 문서"
      ],
      "correct_answer": "관리 대상을 저장하는 공간",
      "explanation": "리포지터리(Repository)는 형상관리 시스템에서 소스 코드, 문서, 빌드 결과물 등 관리 대상 항목을 저장하고 추적하는 공간이다.",
      "wrong_answers": {
        "소프트웨어 실행 환경": "리포지터리는 실행 환경이 아니라 코드 및 버전 관리 공간이다.",
        "배포 로그 파일": "로그 파일은 배포 과정에서 생성되는 결과물이지만, 리포지터리의 핵심 요소는 아니다.",
        "소스코드 문서": "소스 코드 문서는 리포지터리에 저장될 수 있지만, 리포지터리는 문서만이 아니라 다양한 형상항목을 관리하는 저장소이다."
      }
    },
    {
      "id": 14,
      "question": "배포환경 구성 시 빌드 도구의 주요 역할은?",
      "choices": [
        "사용자 인터페이스 개선",
        "배포 스크립트 작성 및 실행",
        "보안 정책 설정",
        "네트워크 관리"
      ],
      "correct_answer": "배포 스크립트 작성 및 실행",
      "explanation": "빌드 도구는 코드 컴파일, 테스트, 패키징 및 배포를 자동화하는 역할을 하며, 배포 스크립트 작성 및 실행을 지원한다.",
      "wrong_answers": {
        "사용자 인터페이스 개선": "UI 개선은 프런트엔드 개발자의 역할이며, 빌드 도구의 기능과는 무관하다.",
        "보안 정책 설정": "보안 정책 설정은 보안 관리 도구 및 운영 정책에 해당하며, 빌드 도구의 주요 역할이 아니다.",
        "네트워크 관리": "네트워크 관리는 시스템 관리자 또는 네트워크 엔지니어의 역할이며, 빌드 도구의 역할과 관련이 없다."
      }
    },
    {
      "id": 15,
      "question": "자동화된 테스트 환경을 구성하기 위해 필요한 도구는 무엇인가?",
      "choices": [
        "형상관리 도구",
        "빌드 스케줄러",
        "테스트 프레임워크",
        "배포 서버"
      ],
      "correct_answer": "테스트 프레임워크",
      "explanation": "자동화된 테스트 환경을 구축하기 위해서는 JUnit, TestNG, Selenium 등의 테스트 프레임워크를 사용하여 테스트를 자동화할 수 있다.",
      "wrong_answers": {
        "형상관리 도구": "형상관리 도구는 코드 및 변경 사항을 추적하는 역할을 하지만, 테스트 환경 구성과는 직접적인 관련이 없다.",
        "빌드 스케줄러": "빌드 스케줄러는 정기적인 빌드를 관리하는 역할을 하며, 테스트 자동화와는 별개이다.",
        "배포 서버": "배포 서버는 애플리케이션을 배포하는 역할을 하며, 테스트 환경을 구성하는 데 직접적인 영향을 주지는 않는다."
      }
    }
  ]
}
