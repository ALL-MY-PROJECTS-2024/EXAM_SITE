{
  "questions": [
    {
      "id": 1,
      "question": "결함 조치 관리의 주요 목표는 무엇입니까?",
      "choices": [
        "테스트 범위 축소",
        "결함의 부작용 최소화",
        "사용자 요구사항 수정",
        "결함 기록 단순화"
      ],
      "correct_answer": "결함의 부작용 최소화",
      "explanation": "결함 조치 관리의 주요 목표는 결함 수정 후 발생할 수 있는 부작용을 최소화하고 소프트웨어의 안정성을 유지하는 것입니다.",
      "wrong_answers": {
        "테스트 범위 축소": "결함 조치 관리는 테스트 범위를 줄이는 것이 아니라 품질을 향상시키는 데 초점을 맞춥니다.",
        "사용자 요구사항 수정": "사용자 요구사항 변경은 결함 조치와는 별개의 프로세스입니다.",
        "결함 기록 단순화": "결함 조치 관리의 핵심은 철저한 기록과 추적이지 단순화가 아닙니다."
      }
    },
    {
      "id": 2,
      "question": "결함 조치 우선순위를 결정할 때 가장 중요한 기준은 무엇입니까?",
      "choices": [
        "결함 수정 비용",
        "결함의 심각도와 영향 범위",
        "테스트 자동화 여부",
        "프로젝트 예산"
      ],
      "correct_answer": "결함의 심각도와 영향 범위",
      "explanation": "결함 조치의 우선순위는 결함이 시스템에 미치는 영향과 심각도를 기준으로 결정됩니다.",
      "wrong_answers": {
        "결함 수정 비용": "비용은 고려 사항이 될 수 있지만, 심각도와 영향 범위가 더 중요한 요소입니다.",
        "테스트 자동화 여부": "자동화 여부보다는 결함의 심각도가 더 중요한 기준입니다.",
        "프로젝트 예산": "예산은 전체 프로젝트 관리의 일부이며, 결함 조치의 최우선 기준은 아닙니다."
      }
    },
    {
      "id": 3,
      "question": "결함 조치 일정 수립 시 우선적으로 고려해야 할 사항은?",
      "choices": [
        "테스터의 기술 수준",
        "개발 팀의 가용성",
        "결함 발생 빈도",
        "형상관리 시스템 유형"
      ],
      "correct_answer": "개발 팀의 가용성",
      "explanation": "결함 수정 일정은 개발 팀이 결함을 해결할 수 있는 시간과 리소스를 고려하여 수립해야 합니다.",
      "wrong_answers": {
        "테스터의 기술 수준": "테스터의 기술 수준보다는 개발 팀이 결함을 수정할 수 있는 능력이 중요합니다.",
        "결함 발생 빈도": "빈도가 높다고 해서 반드시 우선적으로 조치해야 하는 것은 아닙니다.",
        "형상관리 시스템 유형": "형상관리 시스템은 결함 수정과 관련된 보조 도구일 뿐, 일정 수립의 주요 고려 요소는 아닙니다."
      }
    },
    {
      "id": 4,
      "question": "결함 원인을 분석할 때 주로 사용하는 도구는 무엇입니까?",
      "choices": [
        "파레토 다이어그램",
        "테스트 시뮬레이터",
        "배포 스크립트",
        "코드 컴파일러"
      ],
      "correct_answer": "파레토 다이어그램",
      "explanation": "파레토 다이어그램은 결함의 주요 원인을 분석하고, 가장 중요한 원인에 집중하여 해결하는 데 사용됩니다.",
      "wrong_answers": {
        "테스트 시뮬레이터": "테스트 시뮬레이터는 테스트 환경을 조성하는 도구이며, 결함 원인 분석 도구는 아닙니다.",
        "배포 스크립트": "배포 스크립트는 소프트웨어 배포 시 사용되는 도구이며, 결함 원인 분석과는 관계가 없습니다.",
        "코드 컴파일러": "컴파일러는 코드 실행을 위한 도구로, 결함 분석 전용 도구는 아닙니다."
      }
    },
    {
      "id": 5,
      "question": "결함 추적 시스템의 주요 기능은 무엇입니까?",
      "choices": [
        "결함 자동 수정",
        "결함 상태 모니터링 및 추적",
        "결함 발생 예방",
        "결함 복구 스크립트 작성"
      ],
      "correct_answer": "결함 상태 모니터링 및 추적",
      "explanation": "결함 추적 시스템은 결함의 상태를 기록하고 수정 여부를 추적하는 데 사용됩니다.",
      "wrong_answers": {
        "결함 자동 수정": "결함 추적 시스템은 자동 수정이 아닌, 결함을 관리하는 역할을 합니다.",
        "결함 발생 예방": "결함 예방은 요구사항 분석 및 품질 관리 과정에서 이루어집니다.",
        "결함 복구 스크립트 작성": "복구 스크립트 작성은 개발자의 역할이며, 결함 추적 시스템의 기본 기능은 아닙니다."
      }
    },
    {
      "id": 6,
      "question": "결함 관리 프로세스에서 마지막 단계는 무엇입니까?",
      "choices": [
        "결함 기록",
        "결함 검토",
        "결함 수정",
        "결함 상태 추적 및 모니터링"
      ],
      "correct_answer": "결함 상태 추적 및 모니터링",
      "explanation": "결함 관리의 마지막 단계는 결함이 완전히 해결되었는지 추적하고 모니터링하는 과정입니다.",
      "wrong_answers": {
        "결함 기록": "결함 기록은 초기 단계에서 수행되며, 결함을 문서화하는 작업입니다.",
        "결함 검토": "결함 검토는 수정된 결함이 정상적으로 해결되었는지 확인하는 과정이지만, 마지막 단계는 아닙니다.",
        "결함 수정": "결함 수정은 중간 단계로, 수정된 후에도 지속적인 추적과 모니터링이 필요합니다."
      }
    },

    {
      "id": 7,
      "question": "결함 분류의 대표적인 유형이 아닌 것은?",
      "choices": ["시스템 결함", "기능 결함", "테스트 결함", "GUI 결함"],
      "correct_answer": "테스트 결함",
      "explanation": "테스트 결함이라는 개념은 명확하지 않으며, 보통 시스템 결함, 기능 결함, GUI 결함 등으로 분류됩니다.",
      "wrong_answers": {
        "시스템 결함": "시스템 결함은 소프트웨어 전반에서 발생하는 문제입니다.",
        "기능 결함": "기능 결함은 소프트웨어가 기대한 대로 동작하지 않을 때 발생합니다.",
        "GUI 결함": "GUI 결함은 사용자 인터페이스에서 발생하는 문제를 의미합니다."
      }
    },
    {
      "id": 8,
      "question": "결함 조치 후 반드시 수행해야 하는 작업은?",
      "choices": [
        "결함 검토",
        "결함 재확인",
        "결함 로그 삭제",
        "결함 데이터베이스 업데이트"
      ],
      "correct_answer": "결함 재확인",
      "explanation": "결함 수정 후 해당 문제가 완전히 해결되었는지 다시 확인하는 것이 중요합니다.",
      "wrong_answers": {
        "결함 검토": "검토는 중요하지만, 수정 후 재확인이 반드시 필요합니다.",
        "결함 로그 삭제": "결함 로그는 추적을 위해 유지되어야 합니다.",
        "결함 데이터베이스 업데이트": "데이터베이스 업데이트도 필요하지만, 재확인이 더 중요한 과정입니다."
      }
    },
    {
      "id": 9,
      "question": "결함 예방을 위해 필요한 사전 작업은?",
      "choices": [
        "요구사항 명세서 검토",
        "형상관리 시스템 배포",
        "테스트 데이터 삭제",
        "결함 추적 시스템 종료"
      ],
      "correct_answer": "요구사항 명세서 검토",
      "explanation": "결함을 예방하려면 명확한 요구사항을 정의하고 검토하는 과정이 필수적입니다.",
      "wrong_answers": {
        "형상관리 시스템 배포": "형상관리 시스템 배포는 코드 및 버전 관리를 위한 작업으로, 결함 예방과 직접적인 관련이 없습니다.",
        "테스트 데이터 삭제": "테스트 데이터는 오류 검출을 위한 중요한 자료이므로 삭제하는 것은 바람직하지 않습니다.",
        "결함 추적 시스템 종료": "결함 추적 시스템은 결함을 관리하는 데 필수적이므로 종료해서는 안 됩니다."
      }
    },
    {
      "id": 10,
      "question": "결함 조치 가이드라인에서 권장되는 첫 번째 단계는?",
      "choices": [
        "결함 수정 작업 할당",
        "결함 영향도 분석",
        "결함 상태 업데이트",
        "결함 기록 보존"
      ],
      "correct_answer": "결함 영향도 분석",
      "explanation": "결함을 수정하기 전에 해당 결함이 다른 시스템에 미치는 영향을 분석하는 것이 중요합니다.",
      "wrong_answers": {
        "결함 수정 작업 할당": "영향도를 분석한 후에 결함 수정 작업을 할당해야 합니다.",
        "결함 상태 업데이트": "결함 상태 업데이트는 수정 이후에 수행되는 단계입니다.",
        "결함 기록 보존": "결함 기록을 보존하는 것은 중요하지만, 조치의 첫 번째 단계는 아닙니다."
      }
    },
    {
      "id": 11,
      "question": "결함 조치 우선순위 결정 시 가장 먼저 수행해야 할 작업은?",
      "choices": [
        "결함 유형 분류",
        "결함 재현 가능성 평가",
        "결함 조치 계획 수립",
        "결함 발생 시간 기록"
      ],
      "correct_answer": "결함 유형 분류",
      "explanation": "결함을 조치하기 위해서는 먼저 결함이 기능적 결함인지, 성능 결함인지 등을 분류하여 우선순위를 결정해야 합니다.",
      "wrong_answers": {
        "결함 재현 가능성 평가": "재현 가능성을 평가하는 것은 중요하지만, 결함을 분류한 후에 수행해야 하는 작업입니다.",
        "결함 조치 계획 수립": "조치 계획 수립은 결함의 우선순위를 결정한 후에 이루어지는 단계입니다.",
        "결함 발생 시간 기록": "결함 발생 시간을 기록하는 것은 중요하지만, 우선순위 결정의 첫 번째 단계는 아닙니다."
      }
    },
    {
      "id": 12,
      "question": "결함 조치 프로세스에서 형상관리의 주요 역할은?",
      "choices": [
        "결함 발생 원인 분석",
        "변경된 소스의 버전 관리",
        "결함 로그 자동 생성",
        "테스트 환경 복구"
      ],
      "correct_answer": "변경된 소스의 버전 관리",
      "explanation": "형상관리는 변경된 소스를 버전별로 관리하여 결함 조치 후에도 이력을 추적할 수 있도록 돕습니다.",
      "wrong_answers": {
        "결함 발생 원인 분석": "결함 원인 분석은 테스트 및 디버깅 과정에서 수행되며, 형상관리의 주된 역할이 아닙니다.",
        "결함 로그 자동 생성": "결함 로그 생성은 결함 추적 시스템에서 수행하는 기능입니다.",
        "테스트 환경 복구": "테스트 환경 복구는 테스트 팀에서 수행하는 작업으로, 형상관리의 역할과는 다릅니다."
      }
    },
    {
      "id": 13,
      "question": "결함 수정 완료 후 테스터가 수행하는 작업은?",
      "choices": [
        "결함 기록 보관",
        "결함 수정 내용 테스트",
        "결함 로그 삭제",
        "결함 데이터 정리"
      ],
      "correct_answer": "결함 수정 내용 테스트",
      "explanation": "결함이 수정된 후 테스터는 해당 수정이 정상적으로 동작하는지 테스트를 수행해야 합니다.",
      "wrong_answers": {
        "결함 기록 보관": "결함 기록은 유지되어야 하지만, 수정 후 가장 중요한 작업은 테스트입니다.",
        "결함 로그 삭제": "결함 로그는 추적을 위해 유지해야 하며, 삭제하는 것은 바람직하지 않습니다.",
        "결함 데이터 정리": "결함 데이터를 정리하는 것도 필요하지만, 수정된 내용의 테스트가 우선입니다."
      }
    },
    {
      "id": 14,
      "question": "결함 관리 대장에 기록해야 할 내용이 아닌 것은?",
      "choices": ["결함 ID", "결함 원인", "결함 수정 비용", "결함 상태"],
      "correct_answer": "결함 수정 비용",
      "explanation": "결함 관리 대장에는 결함 ID, 원인, 상태 등의 정보가 포함되지만, 수정 비용은 일반적으로 포함되지 않습니다.",
      "wrong_answers": {
        "결함 ID": "각 결함을 식별하기 위해 반드시 기록해야 하는 항목입니다.",
        "결함 원인": "결함이 발생한 원인을 분석하고 기록하는 것은 중요한 과정입니다.",
        "결함 상태": "결함이 수정되었는지, 진행 중인지 등의 상태 정보는 필수적으로 기록해야 합니다."
      }
    },
    {
      "id": 15,
      "question": "결함 조치 중 발생할 수 있는 부작용을 줄이기 위해 필요한 것은?",
      "choices": [
        "결함 관리 대장 업데이트",
        "기존 로직과 연관성 고려",
        "결함 기록 삭제",
        "테스트 환경 제거"
      ],
      "correct_answer": "기존 로직과 연관성 고려",
      "explanation": "결함을 수정할 때 기존 로직과의 연관성을 충분히 고려하지 않으면 새로운 결함이 발생할 수 있습니다.",
      "wrong_answers": {
        "결함 관리 대장 업데이트": "결함 관리 대장 업데이트는 중요하지만, 부작용을 줄이는 직접적인 해결책은 아닙니다.",
        "결함 기록 삭제": "결함 기록을 삭제하면 이전의 이력을 추적할 수 없어 부작용이 발생할 가능성이 높아집니다.",
        "테스트 환경 제거": "테스트 환경을 제거하면 수정된 결함을 재확인할 수 없으므로, 부작용을 줄이는 데 도움이 되지 않습니다."
      }
    }
  ]
}
