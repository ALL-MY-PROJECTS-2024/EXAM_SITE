{
  "questions": [
    {
      "id": 1,
      "question": "프로그래밍 언어 중 컴퓨터가 직접 이해할 수 있는 언어로, 실행 속도가 빠르나 유지관리가 어려운 언어는 무엇인가?",
      "choices": ["고급언어", "저급언어", "객체지향언어", "함수형 언어"],
      "correct_answer": "저급언어",
      "explanation": "저급언어는 기계어와 어셈블리어 같은 언어로, 컴퓨터가 직접 이해할 수 있어 실행 속도가 빠르지만, 가독성이 낮고 유지보수가 어렵다.",
      "wrong_answers": {
        "고급언어": "인간이 이해하기 쉽게 설계된 언어로, 유지보수가 용이하지만 실행 속도는 저급언어보다 느릴 수 있다.",
        "객체지향언어": "객체를 기반으로 설계된 언어로, 유지보수와 확장성이 뛰어나지만 저급언어와는 개념이 다르다.",
        "함수형 언어": "순수 함수의 개념을 기반으로 한 프로그래밍 패러다임이며, 저급언어와 구별된다."
      }
    },
    {
      "id": 2,
      "question": "다음 중 컴파일 언어에 속하지 않는 것은?",
      "choices": ["C", "C++", "Python", "FORTRAN"],
      "correct_answer": "Python",
      "explanation": "Python은 인터프리터 언어로, 소스 코드를 실행 시점에서 한 줄씩 해석하여 실행한다.",
      "wrong_answers": {
        "C": "컴파일 언어로, 소스 코드를 기계어로 변환한 후 실행한다.",
        "C++": "C 기반의 컴파일 언어로, 실행 전에 기계어로 변환된다.",
        "FORTRAN": "과학 및 공학 계산에 주로 사용되는 컴파일 언어이다."
      }
    },
    {
      "id": 3,
      "question": "고급언어를 컴퓨터가 이해할 수 있도록 번역하는 도구는 무엇인가?",
      "choices": ["번역기", "인터프리터", "컴파일러", "디버거"],
      "correct_answer": "컴파일러",
      "explanation": "컴파일러는 전체 소스 코드를 기계어로 변환한 후 실행 파일을 생성하는 번역 프로그램이다.",
      "wrong_answers": {
        "번역기": "일반적인 의미의 번역기를 가리키며, 프로그래밍 언어의 번역 도구로는 사용되지 않는다.",
        "인터프리터": "코드를 한 줄씩 해석하여 실행하는 방식이며, 컴파일러와 차이가 있다.",
        "디버거": "프로그램의 오류를 찾고 수정하는 도구로, 번역 기능을 수행하지 않는다."
      }
    },
    {
      "id": 4,
      "question": "다음 중 절차형 언어가 아닌 것은?",
      "choices": ["FORTRAN", "Pascal", "JAVA", "C"],
      "correct_answer": "JAVA",
      "explanation": "JAVA는 객체지향 언어로, 클래스와 객체를 중심으로 프로그램을 구조화한다.",
      "wrong_answers": {
        "FORTRAN": "과학 계산에 주로 사용되며, 절차적 프로그래밍 구조를 따른다.",
        "Pascal": "교육용으로 개발된 절차형 언어이다.",
        "C": "절차적 프로그래밍의 대표적인 언어로, 함수 단위로 프로그램이 구성된다."
      }
    },
    {
      "id": 5,
      "question": "객체 간의 메시지 통신을 통해 동작하며 상속, 캡슐화, 다형성 등의 특징을 가진 언어 유형은?",
      "choices": ["명령형 언어", "객체지향언어", "함수형 언어", "논리형 언어"],
      "correct_answer": "객체지향언어",
      "explanation": "객체지향언어는 객체 단위로 프로그램을 구성하며, 상속, 캡슐화, 다형성 등의 특징을 갖는다.",
      "wrong_answers": {
        "명령형 언어": "순차적으로 명령을 실행하는 방식이며, 객체지향과는 차이가 있다.",
        "함수형 언어": "함수를 기본 단위로 프로그램을 구성하며, 객체지향 프로그래밍과 다르다.",
        "논리형 언어": "논리 연산을 기반으로 프로그램이 실행되는 방식이다."
      }
    },
    {
      "id": 6,
      "question": "\"Python\"이 속하는 언어 분류는?",
      "choices": [
        "컴파일 언어",
        "인터프리터 언어",
        "바이트코드 언어",
        "저급언어"
      ],
      "correct_answer": "인터프리터 언어",
      "explanation": "Python은 인터프리터 언어로, 코드를 한 줄씩 실행하는 방식이다.",
      "wrong_answers": {
        "컴파일 언어": "전체 코드를 한 번에 번역하여 실행하는 방식으로, Python과 다르다.",
        "바이트코드 언어": "Java 등에서 사용되는 방식으로, Python과 구별된다.",
        "저급언어": "기계어와 가까운 언어로, Python은 이에 해당하지 않는다."
      }
    },
    {
      "id": 7,
      "question": "다음 중 \"명령형 언어\"의 예시는?",
      "choices": ["Scala", "LISP", "PROLOG", "FORTRAN"],
      "correct_answer": "FORTRAN",
      "explanation": "FORTRAN은 명령어를 순차적으로 실행하는 명령형 프로그래밍 언어이다.",
      "wrong_answers": {
        "Scala": "객체지향과 함수형 프로그래밍을 혼합한 언어이다.",
        "LISP": "함수형 프로그래밍 언어로, 명령형 언어와 차이가 있다.",
        "PROLOG": "논리형 프로그래밍 언어로, 선언적 프로그래밍 방식이다."
      }
    },
    {
      "id": 8,
      "question": "다음 중 함수형 언어에 속하지 않는 것은?",
      "choices": ["LISP", "Scala", "JAVA", "Haskell"],
      "correct_answer": "JAVA",
      "explanation": "JAVA는 객체지향 프로그래밍 언어이며, 함수형 언어가 아니다.",
      "wrong_answers": {
        "LISP": "함수형 프로그래밍 언어로, 리스트 기반 연산을 수행한다.",
        "Scala": "객체지향과 함수형 프로그래밍을 혼합한 언어이다.",
        "Haskell": "순수 함수형 프로그래밍 언어로, 고차 함수와 지연 평가를 지원한다."
      }
    },
    {
      "id": 9,
      "question": "다음 중 저급언어의 단점으로 옳지 않은 것은?",
      "choices": [
        "유지관리가 어렵다.",
        "기계마다 기계어가 상이하다.",
        "가독성이 높다.",
        "추상화 수준이 낮다."
      ],
      "correct_answer": "가독성이 높다.",
      "explanation": "저급언어는 가독성이 낮아 개발자가 이해하고 유지보수하기 어렵다.",
      "wrong_answers": {
        "유지관리가 어렵다.": "코드가 복잡하고 추상화가 부족하여 유지보수가 어렵다.",
        "기계마다 기계어가 상이하다.": "기계어는 하드웨어마다 다르게 구현될 수 있다.",
        "추상화 수준이 낮다.": "저급언어는 하드웨어와 직접적으로 연관되므로 추상화 수준이 낮다."
      }
    },
    {
      "id": 10,
      "question": "컴파일러 방식의 장점은?",
      "choices": [
        "실행 파일 생성 불필요",
        "즉시 실행 가능",
        "실행 속도가 빠름",
        "문장 단위 번역"
      ],
      "correct_answer": "실행 속도가 빠름",
      "explanation": "컴파일된 프로그램은 미리 기계어로 변환되므로 실행 속도가 빠르다.",
      "wrong_answers": {
        "실행 파일 생성 불필요": "컴파일 과정에서 실행 파일이 생성된다.",
        "즉시 실행 가능": "컴파일이 완료된 후 실행해야 한다.",
        "문장 단위 번역": "인터프리터 방식이 문장 단위 번역을 수행한다."
      }
    },
    {
      "id": 11,
      "question": "논리형 언어의 대표적인 예시는?",
      "choices": ["PROLOG", "C++", "Python", "Scala"],
      "correct_answer": "PROLOG",
      "explanation": "PROLOG는 논리형 언어의 대표적인 예로, 선언적 프로그래밍 방식을 사용하며 규칙과 사실을 기반으로 연산을 수행한다.",
      "wrong_answers": {
        "C++": "C++는 객체지향 및 절차적 프로그래밍 언어로 논리형 언어가 아니다.",
        "Python": "Python은 인터프리터 방식의 객체지향 및 절차적 언어로 논리형 언어와 다르다.",
        "Scala": "Scala는 객체지향과 함수형 프로그래밍을 혼합한 언어로, 논리형 언어에 속하지 않는다."
      }
    },
    {
      "id": 12,
      "question": "객체지향 프로그래밍의 주요 특징이 아닌 것은?",
      "choices": ["캡슐화", "다형성", "절차적 처리", "상속"],
      "correct_answer": "절차적 처리",
      "explanation": "객체지향 프로그래밍은 절차적 처리보다는 객체를 기반으로 한 데이터와 메서드의 결합을 중점으로 한다.",
      "wrong_answers": {
        "캡슐화": "객체 내부의 데이터를 보호하고 외부 접근을 제한하는 객체지향의 핵심 개념이다.",
        "다형성": "같은 인터페이스 또는 부모 클래스를 공유하는 객체들이 다양한 방식으로 동작할 수 있도록 하는 개념이다.",
        "상속": "기존 클래스를 확장하여 새로운 클래스를 생성하는 객체지향의 중요한 특징이다."
      }
    },
    {
      "id": 13,
      "question": "빌드 방식에 따른 분류에서, 소스 코드를 한 줄씩 번역하며 실행하는 언어는?",
      "choices": [
        "인터프리터 언어",
        "컴파일 언어",
        "바이트 코드 언어",
        "저급언어"
      ],
      "correct_answer": "인터프리터 언어",
      "explanation": "인터프리터 언어는 소스 코드를 실행 시점에서 한 줄씩 번역하며 실행하는 방식의 언어이다.",
      "wrong_answers": {
        "컴파일 언어": "컴파일 언어는 전체 소스 코드를 기계어로 변환한 후 실행한다.",
        "바이트 코드 언어": "바이트 코드 언어는 소스 코드를 중간 코드(바이트 코드)로 변환하여 실행하는 방식이다.",
        "저급언어": "저급언어는 기계어 및 어셈블리어와 같이 하드웨어에 가까운 언어를 의미하며, 빌드 방식과 직접적인 관련이 없다."
      }
    },
    {
      "id": 14,
      "question": "다음 중 개발 편의성 측면에서 고급언어에 대한 설명으로 옳은 것은?",
      "choices": [
        "기계가 직접 이해 가능",
        "번역 과정이 불필요",
        "가독성이 높음",
        "호환성이 낮음"
      ],
      "correct_answer": "가독성이 높음",
      "explanation": "고급언어는 인간이 이해하기 쉬운 문법과 구조를 가지며, 가독성이 높아 유지보수가 용이하다.",
      "wrong_answers": {
        "기계가 직접 이해 가능": "기계어 또는 저급언어에 해당하는 특징으로, 고급언어는 번역 과정을 거쳐야 한다.",
        "번역 과정이 불필요": "고급언어는 컴파일러나 인터프리터를 통해 기계어로 변환되어야 실행이 가능하다.",
        "호환성이 낮음": "고급언어는 다양한 플랫폼에서 실행할 수 있도록 설계되어 일반적으로 호환성이 높다."
      }
    },
    {
      "id": 15,
      "question": "다음 중 프로그래밍 언어의 분류 체계로 적합하지 않은 것은?",
      "choices": [
        "개발 편의성",
        "실행 및 구현 방식",
        "빌드 방식",
        "알고리즘 방식"
      ],
      "correct_answer": "알고리즘 방식",
      "explanation": "알고리즘 방식은 프로그래밍 언어의 분류 기준이 아니라, 문제 해결을 위한 방법론이다.",
      "wrong_answers": {
        "개발 편의성": "개발자의 코드 작성 및 유지보수 용이성을 기준으로 언어를 분류할 수 있다.",
        "실행 및 구현 방식": "언어가 실행되는 방식(컴파일, 인터프리터 등)에 따라 분류할 수 있다.",
        "빌드 방식": "소스 코드가 실행 가능한 형태로 변환되는 방식(컴파일, 인터프리터 등)에 따라 분류할 수 있다."
      }
    }
  ]
}
